<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eduardo&#39;s blog</title>
  <link href="https://ebellani.github.io/blog/"/>
  
    <link href="https://ebellani.github.io/blog/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>2025-04-14T16:46:37Z</updated>
  <author>
    <name>Eduardo Bellani</name>
    
  </author>
  <generator>Hugo</generator>
  <id>https://ebellani.github.io/blog/</id>
  
  <entry>
    <title>Theory in practice: Why Treating Metadata as Relations Pays Off</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2025/theory-in-practice-why-treating-metadata-as-relations-pays-off/"/>
    <id>https://ebellani.github.io/blog/2025/theory-in-practice-why-treating-metadata-as-relations-pays-off/</id>
    <published>2025-04-14T00:00:00Z</published>
    <updated>2025-04-14T00:00:00Z</updated>
    <summary>Underpinning relational databases you find a very powerful principle: all your information should be represented as attributes drawn from domains in relations(Pascal 2020). This is Codd’s Information Principle #1. This principle isn’t just fluffy theory: it can lead to very concrete wins in how we design, query, and maintain systems.1
A practical case: Dependencies for Security Policies This is clearly a metadata question: Which other database objects does this view depend on?</summary>
    <content type="html">&lt;p&gt;Underpinning relational databases you find a very powerful principle:
all your information should be represented as attributes drawn from
domains in
relations(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Pascal 2020&lt;/a&gt;). This is Codd’s
Information Principle #1. This principle isn’t just fluffy theory: it
can lead to very concrete wins in how we design, query, and maintain
systems.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;a-practical-case-dependencies-for-security-policies&#34;&gt;A practical case: Dependencies for Security Policies&lt;/h2&gt;
&lt;p&gt;This is clearly a metadata question: Which other database objects does
this view depend on? In many environments, answering that might involve
using external tools or writing scripts in another language. But in
PostgreSQL, you can answer it with a simple query &lt;strong&gt;because&lt;/strong&gt; PostgreSQL
respects Codd’s principle and exposes metadata as part of its relational
structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;distinct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object_schema_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_object_schema_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_object_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relkind&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_object_type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_rewrite&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ev_class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_depend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;refobjid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_schema&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relnamespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_schema&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relnamespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MY_VIEW&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MY_SCHEMA&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  Retrieves all objects (tables, views, etc.) that MY_SCHEMA.MY_VIEW depends on — across schemas and object types
&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When your system represents metadata relationally, you can reason about
it with the same tools you use for business data. No context-switching,
no ETL jobs, no external tools. Just your relationally inspired SQL.&lt;/p&gt;
&lt;p&gt;This aligns with the foundational ideas behind relational databases and
shows that following sound principles can yield practical advantages.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Pascal, Fabian. 2020. “Understanding Codd’s 12 Rules for Rdbms (Accessed on 2025-04-14).” &lt;a href=&#34;https://www.dbdebunk.com/2020/10/understanding-codds-12-rules-for-rdbms.html&#34;&gt;https://www.dbdebunk.com/2020/10/understanding-codds-12-rules-for-rdbms.html&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/The%20Cathedral%20of%20the%20Archangel%20Michael%20in%20Bronnitsy.jpg&#34;
         alt=&#34;Figure 1: The Cathedral of the Archangel Michael in Bronnitsy underwent a relatively mild transformation: It was used as a state book archive - but the &amp;amp;ldquo;book of books,&amp;amp;rdquo; the Bible, surely couldn&amp;amp;rsquo;t be found there.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The Cathedral of the Archangel Michael in Bronnitsy underwent a relatively mild transformation: It was used as a state book archive - but the &amp;ldquo;book of books,&amp;rdquo; the Bible, surely couldn&amp;rsquo;t be found there.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Recently I had a conversation on linkedin: &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:ugcPost:7316402764975075328?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7316402764975075328%2C7316457084038930432%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287316457084038930432%2Curn%3Ali%3AugcPost%3A7316402764975075328%29&#34;&gt;https://www.linkedin.com/feed/update/urn:li:ugcPost:7316402764975075328?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7316402764975075328%2C7316457084038930432%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287316457084038930432%2Curn%3Ali%3AugcPost%3A7316402764975075328%29&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to Replace LeetCode with Something That Actually Works</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2025/how-to-replace-leetcode-with-something-that-actually-works/"/>
    <id>https://ebellani.github.io/blog/2025/how-to-replace-leetcode-with-something-that-actually-works/</id>
    <published>2025-04-04T00:00:00Z</published>
    <updated>2025-04-04T00:00:00Z</updated>
    <summary>Recently there has been an interest in cheating(?) leetcode style interviews(Yang 2025). These articles highlight a longstanding issue in tech recruiting: puzzle-style assessments have little to no correlation with actual job performance(Konnikova 2013; McAllister 2013), and leetcode is nothing but algorithmic puzzles. This makes them a poor predictor of job performance. What leetcode does predict seems to be success at leetcode style interviews(Mroczka 2024). Go figure.
If you are in power to stop doing these silly things and reach for something with actual evidence of working, here is a blueprint for performing a structured interview with a focus on programmers, but that can be adapted for other positions quite easily.</summary>
    <content type="html">&lt;p&gt;Recently there has been an interest in cheating(?) leetcode style
interviews(&lt;a href=&#34;#citeproc_bib_item_6&#34;&gt;Yang 2025&lt;/a&gt;). These articles highlight
a longstanding issue in tech recruiting: puzzle-style assessments have
little to no correlation with actual job
performance(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Konnikova 2013&lt;/a&gt;; &lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;McAllister 2013&lt;/a&gt;), and leetcode is nothing but algorithmic
puzzles. This makes them a poor predictor of job performance. What
leetcode does predict seems to be success at leetcode style
interviews(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Mroczka 2024&lt;/a&gt;). Go figure.&lt;/p&gt;
&lt;p&gt;If you are in power to stop doing these silly things and reach for
something with actual evidence of working, here is a blueprint for
performing a structured interview with a focus on programmers, but that
can be adapted for other positions quite easily.&lt;/p&gt;
&lt;p&gt;A core part of a structured interview is to determine the competencies
to be assessed by the
interview(&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;of Personnel Management 2008&lt;/a&gt;). According to
(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Hogan and Warrenfeltz 2003&lt;/a&gt;), the skills and behaviors found in virtually
every organizational competency model fall into one of four major
domains, and that they form a natural, overlapping developmental
sequence, with the latter skills (e.g., Leadership Skills) depending on
the appropriate development of the earlier skills (e.g., Intrapersonal
Skills).&lt;/p&gt;
&lt;h2 id=&#34;intrapersonal&#34;&gt;Intrapersonal&lt;/h2&gt;
&lt;p&gt;These skills develop early in childhood and have important consequences for
career development in adulthood. Core components include core-self esteem,
resiliency, and self-control. Intrapersonal skills form the foundation on which
careers develop.&lt;/p&gt;
&lt;h3 id=&#34;questions&#34;&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Can you describe a situation in your life where your capacity of planning made a
difference?&lt;/li&gt;
&lt;li&gt;Can you describe a situation in your life where your capacity for discipline made
a difference?&lt;/li&gt;
&lt;li&gt;Can you describe a situation in your life where your capacity for flexibility
in thinking made a difference?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;answers&#34;&gt;Answers&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;1&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated very little conscientiousness and emotional
stability in the answers. Apathetic, unstable, resented.&lt;/dd&gt;
&lt;dt&gt;5&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated a lot of conscientiousness. Resiliency,
intelligent risk taking, disciplined effort.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;interpersonal&#34;&gt;Interpersonal&lt;/h2&gt;
&lt;p&gt;These skills concern building and sustaining relationships. Interpersonal skills
can be described in terms of three components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an ability to put oneself in the position of another person,&lt;/li&gt;
&lt;li&gt;an ability to accurately perceive and anticipate other’s expectations, and&lt;/li&gt;
&lt;li&gt;an ability to incorporate information about the other person&amp;rsquo;s expectations
into subsequent behavior.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;questions&#34;&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Can you describe a situation in your life where your capacity for building
relationships with others made a difference?&lt;/li&gt;
&lt;li&gt;Can you describe a situation in your life where your capacity for teamwork
made a difference?&lt;/li&gt;
&lt;li&gt;Can you describe a situation in your life where your capacity for
communicating made a difference?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;answers&#34;&gt;Answers&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;1&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated very little capacity for working with
others. Imprecise language, bad intonation, weird social cues.&lt;/dd&gt;
&lt;dt&gt;5&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated a lot of capacity to integrate and to work with
others. Lots of agreeable, extroverted behaviors.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;technical&#34;&gt;Technical&lt;/h2&gt;
&lt;p&gt;These skills differ from Intrapersonal and Interpersonal skills in that they are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the last to develop,&lt;/li&gt;
&lt;li&gt;the easiest to teach,&lt;/li&gt;
&lt;li&gt;the most cognitive, and&lt;/li&gt;
&lt;li&gt;the least dependent upon dealing with other people.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Technical skills involve comparing, compiling, innovating, computing, analyzing,
coordinating, synthesizing, and so on.&lt;/p&gt;
&lt;h3 id=&#34;questions&#34;&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Can you describe your technical progress in your career?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s your favorite programming language and why do you like it the most?&lt;/li&gt;
&lt;li&gt;Can you describe how you make technical judgements when facing scarce
resources (time, etc)?&lt;/li&gt;
&lt;li&gt;Can you describe what is a good software development environment?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;answers&#34;&gt;Answers&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;1&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated very little awareness of the Computer Science
field. Only the obvious knowledge, and very shallow at that.&lt;/dd&gt;
&lt;dt&gt;5&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated amazing grasp of the field, quoting different
areas and integrating them into a coherent whole.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;business&#34;&gt;Business&lt;/h2&gt;
&lt;p&gt;These skills can be understood in terms of components that depend upon
intrapersonal, interpersonal, and technical skills. The point here is to
understand if the person is capable of using his whole tool set to generate
value for others.&lt;/p&gt;
&lt;p&gt;For a leader these entail an ability to recruit talented people to join the
team. Second, one must be able to retain talent once it has been
recruited. Third, one must be able to motivate a team. Fourth, effective leaders
are able to develop and promote a vision for the team. Finally, leadership skill
involves being persistent and hard to discourage.&lt;/p&gt;
&lt;p&gt;For a follower, the persistance component is shared, alongside initiative.&lt;/p&gt;
&lt;h3 id=&#34;questions&#34;&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Can you describe a situation where you generated value for others?&lt;/li&gt;
&lt;li&gt;Can you describe a situation where your initiative made a difference?&lt;/li&gt;
&lt;li&gt;Can you describe how your technical knowledge might help a business like ours?&lt;/li&gt;
&lt;li&gt;Can you describe what is a good software development team?&lt;/li&gt;
&lt;li&gt;Can you describe what is your ideal technical vision?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;answers&#34;&gt;Answers&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;1&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated very little capacity for integrating his
knowledge. Confused technical vision, murky connections.&lt;/dd&gt;
&lt;dt&gt;5&lt;/dt&gt;
&lt;dd&gt;Candidate demonstrated a great grasp on how to use his whole knowledge to
help the business and his team.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;Tech hiring is long overdue for an evidence-based overhaul. Structured
interviews rooted in validated competencies not only predict performance
better — they respect candidates&amp;rsquo; time and intelligence. If you’re
hiring engineers, skip the puzzles and build a process that actually
works.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Andronikov%20Monastery.jpg&#34;
         alt=&#34;Figure 1: Andronikov Monastery of the Savior is a well-preserved monastery from the late Middle Ages. The communists turned it into one of the first concentration camps for political prisoners&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Andronikov Monastery of the Savior is a well-preserved monastery from the late Middle Ages. The communists turned it into one of the first concentration camps for political prisoners&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Hogan, Robert, and Rodney Warrenfeltz. 2003. “Educating the Modern Manager.” &lt;i&gt;Academy of Management Learning &amp;#38; Education&lt;/i&gt; 2 (1): 74–84.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Konnikova, Maria. 2013. “Why Brainteasers Don’t Belong in Job Interviews (Accessed on 2025-04-04).” &lt;a href=&#34;https://www.newyorker.com/tech/annals-of-technology/why-brainteasers-dont-belong-in-job-interviews&#34;&gt;https://www.newyorker.com/tech/annals-of-technology/why-brainteasers-dont-belong-in-job-interviews&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;McAllister, Neil. 2013. “Google Staffing Boss: Our Old Hiring Procedures Were ’worthless’ (Accessed on 2025-04-04).” &lt;a href=&#34;https://www.theregister.com/2013/06/20/google_hiring_procedures/&#34;&gt;https://www.theregister.com/2013/06/20/google_hiring_procedures/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Mroczka, Mike. 2024. “How Well Do Leetcode Ratings Predict Interview Performance? Here’s the Data. (Accessed on 2025-04-04).” &lt;a href=&#34;https://interviewing.io/blog/how-well-do-leetcode-ratings-predict-interview-performance&#34;&gt;https://interviewing.io/blog/how-well-do-leetcode-ratings-predict-interview-performance&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Personnel Management, U.S. Office of. 2008. “Structured Interviews: A Practical Guide.”&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_6&#34;&gt;&lt;/a&gt;Yang, Angela. 2025. “Kicked out of Columbia, This Student Doesn’t Plan to Stop Trolling Big Tech with Ai (Accessed on 2025-04-04).” nbcnews. &lt;a href=&#34;https://www.nbcnews.com/tech/tech-news/columbia-university-student-trolls-big-tech-ai-tool-job-applications-rcna198454&#34;&gt;https://www.nbcnews.com/tech/tech-news/columbia-university-student-trolls-big-tech-ai-tool-job-applications-rcna198454&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Queries when you have a postgresql based system</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2025/queries-when-you-have-a-postgresql-based-system/"/>
    <id>https://ebellani.github.io/blog/2025/queries-when-you-have-a-postgresql-based-system/</id>
    <published>2025-03-24T00:00:00Z</published>
    <updated>2025-03-24T00:00:00Z</updated>
    <summary>Are you managing/developing a PostgreSQL based application? Here are some scripts that might make your life easier dealing with your installation:
selectschema_name,relname,pg_size_pretty(table_size)from(selectpg_catalog.pg_namespace.nspnameasschema_name,relname,pg_total_relation_size(pg_catalog.pg_class.oid)astable_sizefrompg_catalog.pg_classjoinpg_catalog.pg_namespaceonrelnamespace=pg_catalog.pg_namespace.oid)twhereschema_namenotlike&amp;#39;pg_%&amp;#39;orderbytable_sizedesclimit5;Code Snippet 1: Check the 5 largests tables (courtesy of Supabase&#39;s dashboard)  select*fromcron.job_run_detailsorderbystart_timedesclimit5;Code Snippet 2: Check the current running cron jobs  selectact.query,act.datname,act.query_start,nspnameasschema_name,relnameasobject_name,l.pidfrompg_locksljoinpg_classcon(relation=c.oid)joinpg_namespacenspon(c.relnamespace=nsp.oid)joinpg_stat_activityacton(l.pid=act.pid)wherel.pidin(selectpidfrompg_stat_activitywheredatname=current_database()andquery!=current_query())orderbypid;Code Snippet 3: See what is being locked by what (pg_terminate can unlock things) </summary>
    <content type="html">&lt;p&gt;Are you managing/developing a PostgreSQL based application? Here are some scripts
that might make your life easier dealing with your installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schema_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_size_pretty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schema_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_total_relation_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relnamespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schema_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_%&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_size&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  Check the 5 largests tables (courtesy of Supabase&#39;s dashboard)
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cron&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job_run_details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 2:&lt;/span&gt;
  Check the current running cron jobs
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schema_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_locks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nsp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relnamespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_stat_activity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_stat_activity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 3:&lt;/span&gt;
  See what is being locked by what (pg_terminate can unlock things)
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to have decoupled systems without setting your company on fire</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-have-decoupled-systems-without-setting-your-company-on-fire/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-have-decoupled-systems-without-setting-your-company-on-fire/</id>
    <published>2024-12-17T00:00:00Z</published>
    <updated>2024-12-17T00:00:00Z</updated>
    <summary>Have you heard that having decoupled systems is paramount to dealing with complexity at the heart of software?
Have you also seen companies waste piles of cash and lots of developer time trying to build decoupled systems?
This article might be of your interest, since my goal is to teach you how to build decoupled systems cheaply and using technology that is battle tested and that will keep you in control.</summary>
    <content type="html">&lt;p&gt;Have you heard that having decoupled systems is paramount to &lt;code&gt;dealing with complexity at the heart of software&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Have you also seen companies waste piles of cash and lots of developer
time trying to build decoupled systems?&lt;/p&gt;
&lt;p&gt;This article might be of your interest, since my goal is to teach you
how to build decoupled systems cheaply and using technology that is
battle tested and that will keep you in control. How? By&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;See the problems of the current widespread solution to coupling:
microservices;&lt;/li&gt;
&lt;li&gt;See how to implement decoupled systems using a SQL DBMS;&lt;/li&gt;
&lt;li&gt;Visit a bit of the underlying theory about coupling/modularity/views
in light of what was presented.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;a-summary-of-the-comparison-microservices-vs-sql-dbms&#34;&gt;A summary of the comparison: Microservices vs SQL DBMS&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Poor performance with serialization and networking&lt;/li&gt;
&lt;li&gt;Correctness problems over versioning in a distributed system&lt;/li&gt;
&lt;li&gt;Hard to manage multiple binaries and e2e testing&lt;/li&gt;
&lt;li&gt;Dangerous to change APIs&lt;/li&gt;
&lt;li&gt;Slow development because of lack of atomicity of changes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Ghemawat et al. 2023&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL DBMS&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Great performance with data colocation&lt;/li&gt;
&lt;li&gt;Correctness by default&lt;/li&gt;
&lt;li&gt;Single system, easy to test e2e&lt;/li&gt;
&lt;li&gt;Change is made safe by constraints&lt;/li&gt;
&lt;li&gt;ACID baby&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-core-point&#34;&gt;The core point&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/modules.png&#34;/&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;this rule means: We have a module N which uses some module M, but only
through its type (interface) A. M can be replaced by any other module
with the same type, and N will continue to work. That&amp;rsquo;s modularity. (&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Koppel 2023&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or, in non-alien language: It means that the relation between interfaces
and implementations is many-to-many. That means that modularity is a
logical property that can be implemented in many ways.&lt;/p&gt;
&lt;p&gt;The canonical way of doing it in the relational model is through views.&lt;/p&gt;
&lt;h2 id=&#34;so-what-about-views&#34;&gt;So what about views?&lt;/h2&gt;
&lt;p&gt;You can have many views (interfaces) over the same base tables
(implementations). (many to one)&lt;/p&gt;
&lt;p&gt;The same view can have multiple ways of being deduced from the base
tables. (one to many)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This implements modularity, as defined in the previous section&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-original-view--pun-intended--about-views&#34;&gt;The original view (pun intended) about views&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In contrast, the problems treated here are those of data
independence-the independence of application programs and terminal
activities from growth in data types and changes in data representation&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Activities of users at terminals and &amp;hellip; application programs should
remain unaffected when the internal representation of data is changed
and even when some aspects of the external representation are changed.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Codd 1970&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It used to be called logical data independence. It can also be called de-coupling.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/church%20of%20Saint%20Ulrich%20and%20Levin.jpeg&#34;
         alt=&#34;Figure 1: The Church of Ulrich, over 1000 years old, was bombed in 1945 by the americans, but survived. In 1956, it was destroyed by the communists to create the new city center based on communist architecture.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The Church of Ulrich, over 1000 years old, was bombed in 1945 by the americans, but survived. In 1956, it was destroyed by the communists to create the new city center based on communist architecture.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Codd, E. F. 1970. “A Relational Model of Data for Large Shared Data Banks.” &lt;i&gt;Commun. Acm&lt;/i&gt; 13 (6): 377–87. &lt;a href=&#34;https://doi.org/10.1145/362384.362685&#34;&gt;https://doi.org/10.1145/362384.362685&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Ghemawat, Sanjay, Robert Grandl, Srdjan Petrovic, Michael Whittaker, Parveen Patel, Ivan Posva, and Amin Vahdat. 2023. “Towards Modern Development of Cloud Applications.” In &lt;i&gt;Proceedings of the 19th Workshop on Hot Topics in Operating Systems&lt;/i&gt;, 110–17. Hotos ’23. Providence, RI, USA: Association for Computing Machinery. &lt;a href=&#34;https://doi.org/10.1145/3593856.3595909&#34;&gt;https://doi.org/10.1145/3593856.3595909&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Koppel, Jimmy. 2023. “’modules Matter Most’ for the Masses (Accessed on 2024-10-10).” pathsensitive blog. &lt;a href=&#34;https://www.pathsensitive.com/2023/03/modules-matter-most-for-masses.html&#34;&gt;https://www.pathsensitive.com/2023/03/modules-matter-most-for-masses.html&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to unlock motivation for high performance in your team</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-unlock-motivation-for-high-performance-in-your-team/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-unlock-motivation-for-high-performance-in-your-team/</id>
    <published>2024-10-23T00:00:00Z</published>
    <updated>2024-10-23T00:00:00Z</updated>
    <summary>As an engineering manager(EM), one of your core tasks is to build and maintain a team of high performance. To accomplish this, it should be obvious that motivation is a key factor:
 Why do followers join some teams but not others? How do you get followers to exhibit enough of the critical behaviors needed for the team to succeed? And why are some leaders capable of getting followers to go above and beyond the call of duty?</summary>
    <content type="html">&lt;p&gt;As an engineering manager(EM), one of your core tasks is to build and
maintain a team of high performance. To accomplish this, it should be
obvious that motivation is a key factor:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why do followers join some teams but not others? How do you get
followers to exhibit enough of the critical behaviors needed for the
team to succeed? And why are some leaders capable of getting followers
to go above and beyond the call of duty? The ability to motivate others
is a fundamental leadership skill and has strong connections to building
cohesive, goal-oriented teams and getting results through others. The
importance of follower motivation is suggested in findings that most
people believe they could give as much as 15 percent or 20 percent more
effort at work than they now do with no one, including their own bosses,
recognizing any difference. Perhaps even more startling, these workers
also believed they could give 15 percent or 20 percent less effort with
no one noticing any difference. Moreover, variation in work output
varies significantly across leaders and followers. The top 15 percent of
workers in any particular job may produce 20 to 50 percent more output
than the average worker, depending on the complexity of the job. Put
another way, the best computer programmers or salesclerks might write up
to 50 percent more programs or process 50 percent more customer orders.
(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;CURPHY et al. 2018&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s assume that you are convinced that having a motivated team is key
for your success as an EM. Now comes the question, how? Everyone and
their dog has advice on this, mostly about your interactions with your
followers. This article will focus on a different angle: the advice is
to you about you, or more specifically, about your vision.&lt;/p&gt;
&lt;p&gt;Why vision?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Followers expect leaders to provide a sense of mission and a hopeful
view of the future and to explain why they are doing what they are doing
and why it matters. (&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Warrenfeltz and Kellett 2016&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, how do you develop a vision? Since action follows from essence, we
should understand what is the essence of a man. For this context, what
matters is that man is a creature in tension between his contingent
situation and the contemplation of God, the Eternal transcendence.&lt;/p&gt;
&lt;p&gt;The way man deals with this tension sucessfully is with a story. This
story is what connects his present to the vanishing point we call the
future. (&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Noica, Blyth, and Stoiciu 2009&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Since it is likely that the vast majority of people you will encounter
as followers have no such story, they will be inclined to follow yours
as long as you present it clearly and be able to connect it to the
company&amp;rsquo;s goals.&lt;/p&gt;
&lt;p&gt;Summing it up: clarify to yourself and to others what is your story and
how it connects to the current situation. There are specific tools
available if you want help crafting your story, such as
(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Booker 2004&lt;/a&gt;).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/mass-at-nagasaki.jpg&#34;
         alt=&#34;Figure 1: Pontifical High Mass in the ruins of St Mary&amp;amp;rsquo;s Cathedral, Nagasaki, Japan. December 7th, 1949 - (5 years after the atom bomb).&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Pontifical High Mass in the ruins of St Mary&amp;rsquo;s Cathedral, Nagasaki, Japan. December 7th, 1949 - (5 years after the atom bomb).&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Booker, C. 2004. &lt;i&gt;The Seven Basic Plots: Why We Tell Stories&lt;/i&gt;. The Seven Basic Plots: Why We Tell Stories. Continuum.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;CURPHY, G.G., R.L. Hughes, R.C. Ginnett, and G.J. Curphy. 2018. &lt;i&gt;Ise Leadership: Enhancing the Lessons of Experience&lt;/i&gt;. McGraw-Hill Education.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Noica, C., A.I. Blyth, and F. Stoiciu. 2009. &lt;i&gt;Six Maladies of the Contemporary Spirit&lt;/i&gt;. 20 Romanian Writers Series. University of Plymouth Press.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Warrenfeltz, R., and T. Kellett. 2016. &lt;i&gt;Coaching the Dark Side of Personality: High Impact Strategies to Build a Winning Leadership Reputation&lt;/i&gt;. Hogan Assessment Systems, Incorporated.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A simple way to deal with the principal threat to scalability</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-simple-way-to-deal-with-the-principal-threat-to-scalability/"/>
    <id>https://ebellani.github.io/blog/2024/a-simple-way-to-deal-with-the-principal-threat-to-scalability/</id>
    <published>2024-09-20T00:00:00Z</published>
    <updated>2024-09-20T00:00:00Z</updated>
    <summary>If you have a distributed system one of the main worries you probably have is scalability. Well, what is the principal threat to scalability in such systems is the conflict between transactions that are used to guarantee correct results in concurrent operations.
Such conflicts are dealt with by concurrency control, either pessimistically via something like exclusive resource lock or optimistically via something like serializable snapshot isolation.
Let me illustrate the threat with from the pessimistic point of view:</summary>
    <content type="html">&lt;p&gt;If you have a distributed system one of the main worries you probably
have is scalability. Well, what is the principal threat to scalability
in such systems is the conflict between transactions that are used to
guarantee correct results in concurrent operations.&lt;/p&gt;
&lt;p&gt;Such conflicts are dealt with by concurrency control, either
pessimistically via something like exclusive resource lock or
optimistically via something like serializable snapshot isolation.&lt;/p&gt;
&lt;p&gt;Let me illustrate the threat with from the pessimistic point of view:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Access to resources guarded by an exclusive lock is serialized—only one
thread at a time may access it. Of course, we use locks for good
reasons, such as preventing data corruption, but this safety comes at a
price. Persistent contention for a lock limits scalability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The principal threat to scalability in concurrent applications is the
exclusive resource lock.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two factors influence the likelihood of contention for a lock:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how often that lock is requested and&lt;/li&gt;
&lt;li&gt;how long it is held once acquired.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Goetz 2006&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The trick that I&amp;rsquo;m going to present addresses point 1, &lt;code&gt;how often the lock is requested&lt;/code&gt;.  Just to be clear, the same trick applies to
optimistic concurrency control (OCC):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While OCC is guaranteed to make progress, it can still perform quite
poorly under high contention. The simplest of these contention cases is
when a whole lot of clients start at the same time, and try to update
the same database row. With one client guaranteed to succeed every
round, the time to complete all the updates grows linearly with
contention. (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Brooker 2015&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, what is the trick? A combination of a capped exponential backoff
with jittering in order to avoid synchronization of the retries of
several clients. &amp;ldquo;Oh, it can&amp;rsquo;t be that simple&amp;rdquo; you say. Hear the expert
out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After 8 years, this solution continues to serve as a pillar for how
Amazon builds remote client libraries for resilient
systems.(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Brooker 2015&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can check the article above for an in-depth overview. If you are
curious as to what a &lt;code&gt;real&lt;/code&gt; version looks like, below I added the code
that I contributed to Omnigres to implement this for automatic
transaction retries(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Bellani 2024&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backoff_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;retry_attempts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cap_sleep_microsecs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base_sleep_microsecs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * The backoff should increase with each attempt.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_backoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attempt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attempt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// caps the exponent to avoid overflowing,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                              &lt;span class=&#34;c1&#34;&gt;// as the user can control the # of
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                              &lt;span class=&#34;c1&#34;&gt;// attempts.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Get the random jitter to avoid contention in the backoff. Uses the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * process seed initialized in `InitProcessGlobals`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;float8&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#if PG_MAJORVERSION_NUM &amp;gt; 14
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_prng_double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_global_prng_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RAND_MAX&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Implements the backoff + fitter approach
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;backoff_jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attempt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_backoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attempt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Turns the value into something that can be consumed by
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * `pg_sleep`. The literal comes copied from there, to ensure the same
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * ratio.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;float8&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_secs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1000000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Monte-Cassino-before-and-after-bombing-in-1944.jpg&#34;
         alt=&#34;Figure 1: The Benedictine Abbey on Monte Cassino, before and after being bombed by Allied forces, February 15 1944&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The Benedictine Abbey on Monte Cassino, before and after being bombed by Allied forces, February 15 1944&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Bellani, Eduardo. 2024. “Problem: Retries Can Perform Poorly under High Contention.” Github. &lt;a href=&#34;https://github.com/omnigres/omnigres/commit/b9798409f007a6941dc6ad7ef2bccc6ac5cc7ba8&#34;&gt;https://github.com/omnigres/omnigres/commit/b9798409f007a6941dc6ad7ef2bccc6ac5cc7ba8&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Brooker, Marc. 2015. “Exponential Backoff and Jitter (Accessed on 2024-09-22).” AWS Architecture Blog. &lt;a href=&#34;https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/&#34;&gt;https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Goetz, B. 2006. &lt;i&gt;Java Concurrency in Practice&lt;/i&gt;. Addison-Wesley.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Debunking Event Sourcing</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/debunking-event-sourcing/"/>
    <id>https://ebellani.github.io/blog/2024/debunking-event-sourcing/</id>
    <published>2024-08-23T00:00:00Z</published>
    <updated>2024-08-23T00:00:00Z</updated>
    <summary>Are you looking into event sourcing? I hope this article gives you enough information for you to properly contrast it with what I consider an overall better alternative: temporal tables.
The context: my last article (Are you considering Event Sourcing? Think again) has produced some heated responses. One of the responders published an article (Dear Temporal Table Developers ❤) explaining
 .. why temporal tables are &amp;hellip; an inferior choice, especially for systems that require scalability, flexibility, and resilience in an ever-changing world.</summary>
    <content type="html">&lt;p&gt;Are you looking into event sourcing? I hope this article gives you
enough information for you to properly contrast it with what I consider
an overall better alternative: temporal tables.&lt;/p&gt;
&lt;p&gt;The context: my last article (&lt;a href=&#34;/blog/2024/are-you-considering-event-sourcing-think-again/&#34;&gt;Are you considering Event Sourcing? Think again&lt;/a&gt;) has produced some heated responses. One of the responders
published an article (&lt;a href=&#34;https://medium.com/@ZaradarTR/dear-temporal-table-developers-a3f126c010c4#e4c4&#34;&gt;Dear Temporal Table Developers ❤&lt;/a&gt;) explaining&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.. why temporal tables are &amp;hellip; an inferior choice, especially for
systems that require scalability, flexibility, and resilience in an
ever-changing world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the published reply contains an amalgamation of common positions
on this matter, I want to use it as an opportunity to create a reference
for myself and others in the future when debating this topic. Therefore,
I&amp;rsquo;ll go topic by topic, linking to the appropriate place&lt;/p&gt;
&lt;h3 id=&#34;temporal-tables-aren-t-true-history&#34;&gt;Temporal Tables Aren’t True History&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Events (allow) you to understand both the “what” and the “why” in a
meaningful way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here the author is referring to the name of the event that &lt;code&gt;should&lt;/code&gt; map
to an use-case, and claiming that this is impossible with the relational
model.&lt;/p&gt;
&lt;p&gt;This is a bogus claim. If such data is demanded by your business rules,
there is no reason why it can&amp;rsquo;t be expressed as part of a table. Here is
an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reservation-bought&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;reservation-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;user-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;seat-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;venue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a SQL version, all you need is to add the intent as a desired
attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reservation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;references&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;venue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CHECK&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;buy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;rent&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;temporal-tables-impose-rigid-structure&#34;&gt;Temporal Tables Impose Rigid Structure&lt;/h3&gt;
&lt;p&gt;This seems to be the main point of the article. So I&amp;rsquo;ll break it down in
parts and index my replies below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;One of the biggest pitfalls of temporal tables is the inherent
rigidity of the relational model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As your application grows and evolves, so do your requirements, and
changing a temporal table schema can become a significant burden.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event Sourcing lets you evolve your system naturally. Each new
feature or behavior can be introduced as a new event type, without
the need to retroactively change the structure of your past data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This point seems to imply ignorance of what the relational model (RM)
is. The RM is a logical model based on set theory and predicate
logic. One of the major points of the RM is to allow developers the
flexibility to choose access paths after database design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Changing the schema of a temporal database can potentially be serious
and delicate work, since it might involve changing what you claimed
were your past beliefs. This is an universal point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given the previous point, versioning in an event sourced system can
be at least as hard as versioning any other. As one of the leaders of
the ES/CQRS community puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Over the years, I have met many developers who run into issues
dealing with versioning, particularly in Event Sourced systems.&lt;/strong&gt; This
seems odd to me. As we will discuss, Event Sourced systems are in
fact easier to version than structural data in most instances, as
long as you know the patterns for how to version, where they apply,
and the trade-offs between the options.  dealing with versioning,
particularly in Event Sourced
systems. (&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Young 2017&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In fact, I&amp;rsquo;ll claim that managing the evolution of a temporal structure
in event sourced systems is &lt;strong&gt;harder&lt;/strong&gt;. I&amp;rsquo;m not alone in this
assessment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Data conversion in event sourced systems introduces new challenges,
because of the relative novelty of the event sourcing architectural
pattern, because of the lack of standardized tools for data conversion,
and because of the large amount of data that is stored in typical event
stores.(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Overeem, Spoor, and Jansen 2017&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;temporal-tables-aren-t-built-for-distributed-systems&#34;&gt;Temporal Tables Aren’t Built for Distributed Systems&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;.. temporal tables simply don’t cut it. They are designed with a
single-node, relational mindset, which makes them ill-suited for
large-scale, distributed architectures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think the author here is confusing a logical approach, temporal
tables, with an implementation in a DBMS, such as PostgreSQL or SQL
Server. One can certainly scale a modern DBMS to impressive
results(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Justin Kwan 2022&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;complex-queries-and-performance-overhead&#34;&gt;Complex Queries and Performance Overhead&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;With CQRS, you avoid this mess entirely. Instead of bloating your read
models with historical data, you can create dedicated read projections
that are optimized for the specific queries you need. Event-driven
architectures naturally lend themselves to this approach, allowing you
to create purpose-built views without overloading your database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The author seems to be impliying that creating projections are in any
way better than creating queries. This is the opposite of reality,
because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You will pay the cost of maintaining each read
projection(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Kiehl 2019&lt;/a&gt;) as you would with
a view or a snapshot&lt;/li&gt;
&lt;li&gt;SQL is a DSL specifically designed for querying&lt;/li&gt;
&lt;li&gt;CQRS itself adds &lt;code&gt;risky&lt;/code&gt; complexity(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Fowler 2011&lt;/a&gt;). A
very risky kind of complexity indeed: consistency problems.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;a-false-sense-of-auditability&#34;&gt;A False Sense of Auditability&lt;/h3&gt;
&lt;p&gt;This is just restating &lt;a href=&#34;#temporal-tables-aren-t-true-history&#34;&gt;Temporal Tables Aren’t True History&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;temporal-tables-lack-flexibility&#34;&gt;Temporal Tables Lack Flexibility&lt;/h3&gt;
&lt;p&gt;This is just restating &lt;a href=&#34;#temporal-tables-impose-rigid-structure&#34;&gt;Temporal Tables Impose Rigid Structure&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;event-streams-are-the-real-temporal-model&#34;&gt;Event Streams Are the Real Temporal Model&lt;/h3&gt;
&lt;p&gt;This is just restating &lt;a href=&#34;#temporal-tables-aren-t-true-history&#34;&gt;Temporal Tables Aren’t True History&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;temporal-tables-create-monoliths-not-microservices&#34;&gt;Temporal Tables Create Monoliths, Not Microservices&lt;/h3&gt;
&lt;p&gt;This is confusing logical and physical concerns, or, as I put it in
another article (see &lt;a href=&#34;/blog/2024/how-to-avoid-frustration-with-software-architecture/&#34;&gt;How to avoid frustration with software architecture&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fundamentally, I think the problem that originated the current
dissatisfaction with microservices is a double confusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;between the form (modules) and the matter (interacting running
processes) of software and;&lt;/li&gt;
&lt;li&gt;between the the form (modules) of software and the form of software
building organizations (teams, executing environments, deployment
pipelines &amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;my-conclusion&#34;&gt;My conclusion&lt;/h2&gt;
&lt;p&gt;The preference for Event Sourced systems seems to stem from a confusion
of physical and logical concerns and a vague desire for
&lt;code&gt;scaleability&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Liege-ruine-stlambert.jpg&#34;
         alt=&#34;Figure 1: Ruins of Saint Lambert&amp;amp;rsquo;s Cathedral, Liège. Destruction started in 1795 and was caused by republican revolutionaries,&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Ruins of Saint Lambert&amp;rsquo;s Cathedral, Liège. Destruction started in 1795 and was caused by republican revolutionaries,&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Fowler, Martin. 2011. “Cqrs (Accessed on 2024-08-23).” &lt;a href=&#34;https://martinfowler.com/bliki/CQRS.html&#34;&gt;https://martinfowler.com/bliki/CQRS.html&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Justin Kwan, Vignesh Ravichandran. 2022. “Performance Isolation in a Multi-Tenant Database Environment (Accessed on 2024-08-23).” &lt;a href=&#34;https://blog.cloudflare.com/performance-isolation-in-a-multi-tenant-database-environment/&#34;&gt;https://blog.cloudflare.com/performance-isolation-in-a-multi-tenant-database-environment/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Kiehl, Chris. 2019. “Don’t Let the Internet Dupe You, Event Sourcing Is Hard (Accessed on 2024-08-23).” https://chriskiehl.com/. &lt;a href=&#34;https://chriskiehl.com/article/event-sourcing-is-hard&#34;&gt;https://chriskiehl.com/article/event-sourcing-is-hard&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Overeem, Michiel, Marten Spoor, and Slinger Jansen. 2017. “The Dark Side of Event Sourcing: Managing Data Conversion,” 193–204. &lt;a href=&#34;https://doi.org/10.1109/SANER.2017.7884621&#34;&gt;https://doi.org/10.1109/SANER.2017.7884621&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Young, Gregory. 2017. “Versioning in an Event Sourced System (Accessed on 2024-08-23).” leanpub. &lt;a href=&#34;https://leanpub.com/esversioning&#34;&gt;https://leanpub.com/esversioning&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Are you considering Event Sourcing? Think again.</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/are-you-considering-event-sourcing-think-again/"/>
    <id>https://ebellani.github.io/blog/2024/are-you-considering-event-sourcing-think-again/</id>
    <published>2024-08-16T00:00:00Z</published>
    <updated>2024-08-16T00:00:00Z</updated>
    <summary>Are you considering doing event sourcing? Maybe you have read that it is necessary for your project or that you will have great benefits in doing so.
If so, I ask you to think about an alternative. Maybe you already have something of equal capacity in the tooling that you use and could extract all the benefits for a fraction of the cost. What is that something? Your old SQL RDBMS (MySQL, PostgreSQL, SQL Server, Oracle, etc).</summary>
    <content type="html">&lt;p&gt;Are you considering doing event sourcing? Maybe you have read that it is
necessary for your project or that you will have great benefits in doing
so.&lt;/p&gt;
&lt;p&gt;If so, I ask you to think about an alternative. Maybe you already have
something of equal capacity in the tooling that you use and could
extract all the benefits for a fraction of the cost. What is that
something? Your old SQL RDBMS (MySQL, PostgreSQL, SQL Server, Oracle,
etc).&lt;/p&gt;
&lt;p&gt;Here is the kicker: Temporal tables! Most SQL DBMSes already implement
such feature(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Jungwirth 2019&lt;/a&gt;), and they basically allow
you to reap all the benefits of ES while still keeping to your CRUD
style of programming(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Esposito 2017&lt;/a&gt;). Think
continuation passing style, but with an &lt;code&gt;async/await&lt;/code&gt; syntax that allows
you think linearly.&lt;/p&gt;
&lt;p&gt;To demonstrate the point, here is a table with the claimed benefits from
each approach, from the vendors themselves(slightly reworded for space
eficiency)(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Team 2024&lt;/a&gt;; &lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Microsoft 2024&lt;/a&gt;):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Temporal Tables&lt;/th&gt;
&lt;th&gt;Event Sourcing&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Auditing&lt;/td&gt;
&lt;td&gt;Auditing&lt;/td&gt;
&lt;td&gt;An immutable audit trail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recovering from application errors&lt;/td&gt;
&lt;td&gt;Testing &amp;amp; RCA&lt;/td&gt;
&lt;td&gt;Improving debugging by having &amp;lsquo;what if&amp;rsquo; scenarios&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calculating trends&lt;/td&gt;
&lt;td&gt;Analytics Capabilities&lt;/td&gt;
&lt;td&gt;Temporal queries to see your past beliefs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reconstructing data&lt;/td&gt;
&lt;td&gt;Zero data loss&lt;/td&gt;
&lt;td&gt;All state is preserved&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/spanish-holocaust.jpg&#34;
         alt=&#34;Figure 1: Mock execution of Jesus Christ by the Death Brigade, communist revolutionaries led by Pascual Fresquet. Spain 1936.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Mock execution of Jesus Christ by the &lt;code&gt;Death Brigade&lt;/code&gt;, communist revolutionaries led by Pascual Fresquet. Spain 1936.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Esposito, Dino. 2017. “Soft Updates with Temporal Tables.” MSDN Magazine. &lt;a href=&#34;https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/march/cutting-edge-soft-updates-with-temporal-tables&#34;&gt;https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/march/cutting-edge-soft-updates-with-temporal-tables&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Jungwirth, Paul A. 2019. “Survey of Sql:2011 Temporal Features.” Illuminated Computing. &lt;a href=&#34;https://illuminatedcomputing.com/posts/2019/08/sql2011-survey/&#34;&gt;https://illuminatedcomputing.com/posts/2019/08/sql2011-survey/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Microsoft. 2024. “Temporal Tables.” Microsoft documentation. &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/relational-databases/tables/temporal-tables&#34;&gt;https://learn.microsoft.com/en-us/sql/relational-databases/tables/temporal-tables&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Team, Event Store. 2024. “Benefits of Event Sourcing.” Event Store Blog. &lt;a href=&#34;https://www.eventstore.com/blog/benefits-of-event-sourcing&#34;&gt;https://www.eventstore.com/blog/benefits-of-event-sourcing&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Crowdstrike&#39;s outage should not have happened, and the company is missing the point on how to avoid it in the future</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/analyzing-crowdstrike-s-root-cause-analysis-or-on-missing-the-point-about-quality/"/>
    <id>https://ebellani.github.io/blog/2024/analyzing-crowdstrike-s-root-cause-analysis-or-on-missing-the-point-about-quality/</id>
    <published>2024-08-07T00:00:00Z</published>
    <updated>2024-08-07T00:00:00Z</updated>
    <summary>A global IT outage occurred on [2024-07-18 Thu], with several industries having significant economic problems (see Appendix 1: The impact for some quotes on what happened). The outage what caused by a bug in the remote update system of the software of Crowdstrike, a popular Threat Intelligence/Response company.
The company has published the Post Incident Review(Crowdstrike 2024a) right after the incident and has just released its root cause analysis (Crowdstrike 2024b).</summary>
    <content type="html">&lt;p&gt;A global IT outage occurred on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2024-07-18 Thu]&lt;/span&gt;&lt;/span&gt;, with several industries
having significant economic problems (see &lt;a href=&#34;#crowdstrike-appendix-1&#34;&gt;Appendix 1: The impact&lt;/a&gt; for
some quotes on what happened). The outage what caused by a bug in the
remote update system of the software of Crowdstrike, a popular Threat
Intelligence/Response company.&lt;/p&gt;
&lt;p&gt;The company has published the Post Incident
Review(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Crowdstrike 2024a&lt;/a&gt;) right
after the incident and has just released its root cause analysis
(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Crowdstrike 2024b&lt;/a&gt;). Reading them has
led me to write this article, specially the proposed mitigations.&lt;/p&gt;
&lt;p&gt;According to the RCA, the essence of what happened was an index out of
bounds, which is a special case of a buffer overflow and considered an
&lt;strong&gt;undefined behavior in C++&lt;/strong&gt;, the language that seems to be used to
develop crowdstrike&amp;rsquo; system(&lt;a href=&#34;#citeproc_bib_item_6&#34;&gt;Stack 2024&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Here then we get to the core of my argument: For a software of this
criticality, such problem should &lt;strong&gt;not be possible&lt;/strong&gt;. The technology to
ensure such has existed for decades already, as can be seen in this
quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; we can continue to add contracts to the code until every subprogram
has a fully functional specification. By this we mean that every
subprogram has a postcondition that specifies the value of each of its
outputs and a precondition as required to constrain the input
space. Further type invariants may also be added over and above those
already present from Gold level. Once the implementation has been
completed against this full specification and all VCs generated by the
analyzer have been proved, we have reached Platinum level of SPARK
assurance.&lt;/p&gt;
&lt;p&gt;Due to the additional effort involved in developing the specification
and proof to this level, Platinum will only be appropriate for the most
critical applications. However, it is worth considering a reduction in
unit testing for functional verification if Platinum-level proof has
been achieved, since we *know that the program will return the correct
result for all inputs, not just for those we have been able to
test*. (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Chapman et al. 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Furthermore, all the technical mitigations proposed in the RCA (see the
full list of problems found and their proposals in
&lt;a href=&#34;#crowdstrike-appendix-2&#34;&gt;Appendix 2:  What happened&lt;/a&gt;) amount to just plugging holes. But safety
cannot be achieved in such way, safety needs to be designed into the
design, tools and languages used from the start of such endeavor.&lt;/p&gt;
&lt;p&gt;If I were a client of Crowdstrike, I would be worried about the future.&lt;/p&gt;
&lt;h2 id=&#34;crowdstrike-appendix-1&#34;&gt;Appendix 1: The impact&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A major IT fault has hit services and infrastructure around the world,
with aviation, banking, healthcare and financial services among the
sectors affected.(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Banfield-Nwachi 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;The CrowdStrike outage didn&amp;rsquo;t just delay flights and make it harder to
order coffee. It also affected doctor&amp;rsquo;s offices and hospitals, 911
emergency services, hotel check-in and key card systems, and work-issued
computers that were online and grabbing updates when the flawed update
was sent out. In addition to providing fixes for client PCs and virtual
machines hosted in its Azure cloud, Microsoft says it has been working
with Google Cloud Platform, Amazon Web Services, and &amp;ldquo;other cloud
providers and stakeholders&amp;rdquo; to provide fixes to Windows VMs running in
its competitors&amp;rsquo; clouds. (&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Cunningham 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;While software updates may occasionally cause disturbances, significant
incidents like the CrowdStrike event are infrequent. We currently
estimate that CrowdStrike’s update affected 8.5 million Windows devices,
or less than one percent of all Windows machines. While the percentage
was small, the broad economic and societal impacts reflect the use of
CrowdStrike by enterprises that run many critical services. (&lt;a href=&#34;#citeproc_bib_item_7&#34;&gt;Weston 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;crowdstrike-appendix-2&#34;&gt;Appendix 2:  What happened&lt;/h2&gt;
&lt;p&gt;Here is the list of problems found and their mitigations proposed by
Crowdstrike&amp;rsquo;s RCA(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Crowdstrike 2024b&lt;/a&gt;)
(slightly reworded for space eficiency):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Finding&lt;/th&gt;
&lt;th&gt;Mitigation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The number of input fields .. not validated at sensor compile time&lt;/td&gt;
&lt;td&gt;Validate the number of input fields at compile time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Missing runtime array bounds check&lt;/td&gt;
&lt;td&gt;Add runtime input array bounds checks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lack of variety in testing&lt;/td&gt;
&lt;td&gt;Increase test coverage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inconsistency between validator and interpreter&lt;/td&gt;
&lt;td&gt;Fix the instance of inconsistency and add checks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No validation in the interpreter&lt;/td&gt;
&lt;td&gt;Add tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No staged deployment&lt;/td&gt;
&lt;td&gt;Add staged deployment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/St%20Nedelya.jpg&#34;
         alt=&#34;Figure 1: St Nedelya Church, partially destroyed in a terrorist attack by the Bulgarian Communist Party. 16 April 1925.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;St Nedelya Church, partially destroyed in a terrorist attack by the Bulgarian Communist Party. 16 April 1925.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Banfield-Nwachi, Mabel. 2024. “Windows Global It Outage: What We Know so Far.” The Guardian. &lt;a href=&#34;https://www.theguardian.com/technology/article/2024/jul/19/windows-global-it-outage-what-we-know-so-far&#34;&gt;https://www.theguardian.com/technology/article/2024/jul/19/windows-global-it-outage-what-we-know-so-far&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Chapman, Roderick, Claire Dross, Stuart Matthews, and Yannick Moy. 2024. “Co-Developing Programs and Their Proof of Correctness.” &lt;i&gt;Commun. Acm&lt;/i&gt; 67 (3): 84–94. &lt;a href=&#34;https://doi.org/10.1145/3624728&#34;&gt;https://doi.org/10.1145/3624728&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Crowdstrike. 2024a. “Crowdstrike Preliminary Post Incident Review (Pir): Content Configuration Update Impacting the Falcon Sensor and the Windows Operating System (Bsod).” Crowdstrike blog. &lt;a href=&#34;https://www.crowdstrike.com/wp-content/uploads/2024/07/CrowdStrike-PIR-Executive-Summary.pdf&#34;&gt;https://www.crowdstrike.com/wp-content/uploads/2024/07/CrowdStrike-PIR-Executive-Summary.pdf&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;———. 2024b. “External Technical Root Cause Analysis — Channel File 291.” Crowdstrike blog. &lt;a href=&#34;https://www.crowdstrike.com/wp-content/uploads/2024/08/Channel-File-291-Incident-Root-Cause-Analysis-08.06.2024.pdf&#34;&gt;https://www.crowdstrike.com/wp-content/uploads/2024/08/Channel-File-291-Incident-Root-Cause-Analysis-08.06.2024.pdf&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Cunningham, Andrew. 2024. “Microsoft Says 8.5m Systems Hit by Crowdstrike Bsod, Releases Usb Recovery Tool.” Ars Technica. &lt;a href=&#34;https://arstechnica.com/information-technology/2024/07/microsoft-says-8-5m-systems-hit-by-crowdstrike-bsod-releases-usb-recovery-tool/&#34;&gt;https://arstechnica.com/information-technology/2024/07/microsoft-says-8-5m-systems-hit-by-crowdstrike-bsod-releases-usb-recovery-tool/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_6&#34;&gt;&lt;/a&gt;Stack, The. 2024. “Crowdstrike Promises Rca as c++ Null Pointer Claim Contested.” The stack. &lt;a href=&#34;https://www.thestack.technology/crowstrike-null-pointer-blamed-rca/&#34;&gt;https://www.thestack.technology/crowstrike-null-pointer-blamed-rca/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_7&#34;&gt;&lt;/a&gt;Weston, David. 2024. “Helping Our Customers through the Crowdstrike Outage.” Microsoft Official Blog. &lt;a href=&#34;https://blogs.microsoft.com/blog/2024/07/20/helping-our-customers-through-the-crowdstrike-outage/&#34;&gt;https://blogs.microsoft.com/blog/2024/07/20/helping-our-customers-through-the-crowdstrike-outage/&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to avoid frustration with software architecture</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-avoid-frustration-with-software-architecture/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-avoid-frustration-with-software-architecture/</id>
    <published>2024-07-18T00:00:00Z</published>
    <updated>2024-07-18T00:00:00Z</updated>
    <summary>It is becoming more common for companies to come out with stories on the downsides of distributed microservice architectures1(Kolny 2023; Ghemawat et al. 2023).
Instead of hopping in this bandwagon, as tempting as this might be, I want to suggest how could one avoid being caught in such situation in the first place.
Fundamentally, I think the problem that originated the current dissatisfaction with microservices is a double confusion:
 between the form (modules) and the matter (interacting running processes) of software and(Ainsworth 2024); between the the form (modules) of software and the form of software building organizations (teams, executing environments, deployment pipelines &amp;hellip;).</summary>
    <content type="html">&lt;p&gt;It is becoming more common for companies to come out with stories on the
downsides of distributed microservice
architectures&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Kolny 2023&lt;/a&gt;; &lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Ghemawat et al. 2023&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Instead of hopping in this bandwagon, as tempting as this might be, I
want to suggest how could one avoid being caught in such situation in
the first place.&lt;/p&gt;
&lt;p&gt;Fundamentally, I think the problem that originated the current
dissatisfaction with microservices is a double confusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;between the form (modules) and the matter (interacting running
processes) of software and(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Ainsworth 2024&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;between the the form (modules) of software and the form of software
building organizations (teams, executing environments,
deployment pipelines &amp;hellip;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interestingly enough, such structures are the 3 categories of software
architecture proposed in a standard Software Architecture
book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl&gt;
&lt;dt&gt;Module structures&lt;/dt&gt;
&lt;dd&gt;partition systems into implementation units&lt;/dd&gt;
&lt;dt&gt;Component-and-connector (C&amp;amp;C) structures&lt;/dt&gt;
&lt;dd&gt;focus on the way the
elements interact with each other at runtime to carry out the system’s
functions.&lt;/dd&gt;
&lt;dt&gt;Allocation structures&lt;/dt&gt;
&lt;dd&gt;establish the mapping from software
structures to the system’s non-software structures, such as its
organization, or its development, test, and execution
environments. (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Bass et al. 2021&lt;/a&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;so-what&#34;&gt;So what?&lt;/h2&gt;
&lt;p&gt;In order to avoid confusion and unecessary costs, the next time you are
discussing software architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you know which category you are talking about;&lt;/li&gt;
&lt;li&gt;Insist on exaustive definitions of key terms (such as &lt;code&gt;module&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Be sure to refer to reputable sources.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Beeldenstorm_%28Iconoclastic_Fury%29_in_Antwerpen_1566_Frans_Hogenberg.jpg&#34;
         alt=&#34;Figure 1: Print of the destruction in the Church of Our Lady in Antwerp, the &amp;amp;ldquo;signature event&amp;amp;rdquo; of the Beeldenstorm, 20 August 1566, by Frans Hogenberg&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Print of the destruction in the Church of Our Lady in Antwerp, the &amp;ldquo;signature event&amp;rdquo; of the Beeldenstorm, 20 August 1566, by Frans Hogenberg&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Ainsworth, Thomas. 2024. “Form vs. Matter.” In &lt;i&gt;The Stanford Encyclopedia of Philosophy&lt;/i&gt;, edited by Edward N. Zalta and Uri Nodelman, Fall 2024. https://plato.stanford.edu/entries/form-matter/; Metaphysics Research Lab, Stanford University.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Bass, L., P. Clements, R. Kazman, and an O’Reilly Media Company Safari. 2021. &lt;i&gt;Software Architecture in Practice, 4th Edition&lt;/i&gt;. Sei Series in Software Engineering. Addison-Wesley Professional.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Ghemawat, Sanjay, Robert Grandl, Srdjan Petrovic, Michael Whittaker, Parveen Patel, Ivan Posva, and Amin Vahdat. 2023. “Towards Modern Development of Cloud Applications.” In &lt;i&gt;Proceedings of the 19th Workshop on Hot Topics in Operating Systems&lt;/i&gt;, 110–17. Hotos ’23. Providence, RI, USA: Association for Computing Machinery. &lt;a href=&#34;https://doi.org/10.1145/3593856.3595909&#34;&gt;https://doi.org/10.1145/3593856.3595909&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Kolny, Marcin. 2023. “Scaling up the Prime Video Audio/Video Monitoring Service and Reducing Costs by 90\%.” &lt;a href=&#34;https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90&#34;&gt;https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Including a claim of cost reductions of over 90%!&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to avoid a common career pitfall</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-avoid-a-common-career-pitfall/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-avoid-a-common-career-pitfall/</id>
    <published>2024-07-02T00:00:00Z</published>
    <updated>2024-07-02T00:00:00Z</updated>
    <summary>If the way you think others see you is in stark contrast to how others actually see you, you are in danger of derailing in your career.
To avoid that, here are 3 steps, and a reference:
 Ask and embrace feedback from bosses, peers and followers1, Expose your most cherished ideas to the most intense forms of public scrutiny you can find, See ways to measure yourself, such as 360 feedback mechanisms and validated personality assessments.</summary>
    <content type="html">&lt;p&gt;If the way you think others see you is in stark contrast to how others
actually see you, you are in danger of derailing in your career.&lt;/p&gt;
&lt;p&gt;To avoid that, here are 3 steps, and a reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask and &lt;strong&gt;embrace&lt;/strong&gt; feedback from bosses, peers and followers&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;/li&gt;
&lt;li&gt;Expose your most cherished ideas to the most intense forms of public scrutiny you can find,&lt;/li&gt;
&lt;li&gt;See ways to measure yourself, such as 360 feedback mechanisms and
validated personality assessments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It all boils down to reducing your own cognitive
dissonance(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Festinger 1957&lt;/a&gt;), which is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; The maximum dissonance which could exist &amp;hellip;  determined by the
resistance to admitting that he had been wrong or foolish.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/French_School_-_View_of_the_abbey_of_Saint-Victor_%28Saint_Victor%29_former_abbey_of_regular_canons_-_%28MeisterDrucke-917697%29.jpg&#34;
         alt=&#34;Figure 1: Abbey of St Victor, before being destroyed by republican revolutionaries during the French Revolution&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Abbey of St Victor, before being destroyed by republican revolutionaries during the French Revolution&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Festinger, L. 1957. &lt;i&gt;A Theory of Cognitive Dissonance&lt;/i&gt;. Mass Communication Series. Stanford University Press.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I like the terms superordinate, coordinates and subordinates, but
they are not in common usage&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Integrity Constraints and business value</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/constraints-and-business-value/"/>
    <id>https://ebellani.github.io/blog/2024/constraints-and-business-value/</id>
    <published>2024-06-26T00:00:00Z</published>
    <updated>2024-06-26T00:00:00Z</updated>
    <summary>Again with this database business? Let me try to motivate you dear reader before I start again with a illustrative case: SQL Injections!
 SQL injection is one of the oldest vulnerabilities still present in the OWASP TOP 10 (CyberSecura 2021) A well documented case puts the cost of one SQL Injection in USD 196k (Group 2014)  Ok, and how these are related to databases, and more specifically constraints? And what are these constraints?</summary>
    <content type="html">&lt;p&gt;Again with this database business? Let me try to motivate you dear
reader before I start again with a illustrative case: SQL Injections!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL injection is one of the oldest vulnerabilities still present in
the OWASP TOP 10 (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;CyberSecura 2021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A well documented case puts the cost of one SQL Injection in USD 196k
(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Group 2014&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, and how these are related to databases, and more specifically
constraints? And what are these constraints?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt; are informal business rules (BR) expressed in natural
language that constrain the values of the shared properties of entity
members of a class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrity constraints&lt;/strong&gt; are the formalized versions of the constraints
as first order predicates that represent them in the database, expressed
in a specific data language and enforced by the DBMS in the database for
all applications, with potential reduction in application development
and maintenance estimated at as high as 80%.&lt;/p&gt;
&lt;p&gt;Integrity independence (II)—DBMS-enforced integrity in the database—was
a major objective and is an advantage of database management in general
and relational database management in particular (and is enshrined as
one of the famous 12 Codd rules). It is much superior to
application-enforced integrity— &lt;strong&gt;a redundant, unreliable and prone to
error development and maintenance burden— which was readily subvertible&lt;/strong&gt;. (&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Pascal 2016&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, say I got your attention about SQL Injections and you have some
clarity on what I mean by constraints. How do I connect these 2 topics?&lt;/p&gt;
&lt;p&gt;Here is how: if developers were aware that you could encode your
authentication/authorization rules at the DBMS level as integrity
constraints, SQL injections would be impossible!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; why do it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All access control performed by database – even if application code is compromised&lt;/li&gt;
&lt;li&gt;Essentially, users can be given freeform sql access – database is a
Fort Knox and will not allow unauthorized operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Developer productivity:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No more time spent on access control and worrying about security&lt;/li&gt;
&lt;li&gt;Even the new guy can now safely work on applications, api’s etc.&lt;/li&gt;
&lt;li&gt;Worst case, api breaks, but the data is perfectly safe (&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Swart 2019&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consider the double effect of properly encoding this integrity
constraint (data access) where it belongs (with the system managing the data):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You avoid an entire class of common and expensive problems&lt;/li&gt;
&lt;li&gt;Because of that, your developers can work on your actual product
instead of solving this non issue over and over again.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;CyberSecura, Consultant. 2021. “Sql Injection : Why Is This Attack Still Possible in 2021?” &lt;a href=&#34;https://www.cybersecura.com/en/post/sql-injection-why-is-this-attack-still-possible-in-2021&#34;&gt;https://www.cybersecura.com/en/post/sql-injection-why-is-this-attack-still-possible-in-2021&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Group, NTT. 2014. “Global Threat Intelligence Report.” NTT Innovation Institute.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Pascal, Fabian. 2016. &lt;i&gt;The Dbdebunk Guide to Misconceptions About Data Fundamentals&lt;/i&gt;. DATABASE DEBUNKINGS.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Swart, Bennie. 2019. “Row Level Security.” Postgres Conference. Postgres Conference US. &lt;a href=&#34;https://postgresconf.org/system/events/document/000/000/996/pgconf_us_2019.pdf&#34;&gt;https://postgresconf.org/system/events/document/000/000/996/pgconf_us_2019.pdf&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Substantial and accidental forms of a SQL expression</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/substantial-and-accidental-forms-of-a-sql-expression/"/>
    <id>https://ebellani.github.io/blog/2024/substantial-and-accidental-forms-of-a-sql-expression/</id>
    <published>2024-06-20T00:00:00Z</published>
    <updated>2024-06-20T00:00:00Z</updated>
    <summary>Multiplicity of parts, variety, and unity of plan which
combines the parts into a coherent whole, &amp;ndash;
such are the elements of order found in all beauty.
(De Wulf 2012)
 I have been working with data intensive applications for a while and of course that means exposure to a lot of SQL, both personally and training other developers.
In these experiences I have noticed that it is sometimes harder than it should be to grasp what SQL is doing, specially since its accidental form makes understanding its substantial form so hard.</summary>
    <content type="html">&lt;div class=&#34;verse&#34;&gt;
&lt;p&gt;Multiplicity of parts, variety, and unity of plan which&lt;br /&gt;
combines the parts into a coherent whole, &amp;ndash;&lt;br /&gt;
such are the elements of order found in all beauty.&lt;br /&gt;
(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;De Wulf 2012&lt;/a&gt;)&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have been working with data intensive applications for a while and of
course that means exposure to a lot of SQL, both personally and training
other developers.&lt;/p&gt;
&lt;p&gt;In these experiences I have noticed that it is sometimes harder than it
should be to grasp what SQL is doing, specially since its accidental
form makes understanding its substantial form so hard. In this post I&amp;rsquo;m
going to try to help the reader separate the two and understand SQL
better.&lt;/p&gt;
&lt;p&gt;But first, some definitions of terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; &lt;strong&gt;form&lt;/strong&gt; is the principle of organization of a thing’s matter, or the
thing’s intelligible nature, form can be of two kinds.&lt;/p&gt;
&lt;p&gt;&amp;hellip; (it) can be &lt;strong&gt;substantial&lt;/strong&gt;, organizing the matter into the
kind of thing that the substance is.&lt;/p&gt;
&lt;p&gt;On the other hand, form can be &lt;strong&gt;accidental&lt;/strong&gt;, organising some part of an
already constituted substance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;substantial form&lt;/strong&gt; always &amp;hellip; brings a new substance into existence;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accidental form simply informs an already existing substance, and in
doing so it simply modifies some substance. (&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Kerrl, n.d.&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the core problems with SQL and in particular its &lt;code&gt;SELECT&lt;/code&gt;
expression is that the way it is written/read (and the usual
expectations of the terms such as &lt;code&gt;SELECT/FROM&lt;/code&gt; &amp;hellip;) is very different
from what is actually taking place.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s discuss this fact starting from an example (the example and much
of the discussion are taken from (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date and Darwen 1997&lt;/a&gt;))&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Weight in grams =&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TEXT1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WEIGHT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;454&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GMWT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Max Quantity =&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TEXT2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MQTY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Red&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WEIGHT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HAVING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;350&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difficulty here starts right at the begging, since the &lt;code&gt;SELECT&lt;/code&gt;
clause is the first to be read and written, but it is the &lt;strong&gt;last&lt;/strong&gt; to be
evaluated. Here is how to interpret this &lt;code&gt;SELECT&lt;/code&gt; expression:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--join&#34;&gt;&lt;/span&gt;: The source of the data. An usually overseen point is
that the &lt;code&gt;FROM&lt;/code&gt; clause is actually a &lt;code&gt;JOIN&lt;/code&gt; (a &lt;code&gt;CROSS JOIN&lt;/code&gt;
specifically).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHERE&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--restriction&#34;&gt;&lt;/span&gt;: The result of the &lt;code&gt;JOIN&lt;/code&gt; of the
&lt;a href=&#34;#org-target--join&#34;&gt;previous step&lt;/a&gt; is reduced by elimination of rows (a process
called &lt;code&gt;RESTRICTION&lt;/code&gt; in the Relational Algebra).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--dictionary&#34;&gt;&lt;/span&gt;: This is one of the most complex parts of
the expression because it goes outside the Relational Algebra. You
can think of it as creating, from the &lt;a href=&#34;#org-target--restriction&#34;&gt;restricted table&lt;/a&gt;, a Dictionary
where the keys are a combination of the values of the defined columns
and the referenced values are all the rows where the keys exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE HOWEVER&lt;/strong&gt; that such Dictionary is &lt;strong&gt;NOT&lt;/strong&gt; a proper table. And that is why a
&lt;code&gt;GROUP BY&lt;/code&gt; clause will always demand a corresponding &lt;code&gt;SELECT&lt;/code&gt; clause
that turns such Dictionary into a proper table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HAVING&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--filter&#34;&gt;&lt;/span&gt;: This clause applies to the &lt;a href=&#34;#org-target--dictionary&#34;&gt;Dictionary values
generated by GROUP BY&lt;/a&gt;, filtering all rows that do not match the
condition. This is another operator that sits outside the Relational
Algebra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; : This is called a &lt;code&gt;PROJECTION&lt;/code&gt; in Relational Algebra. It is
where you pick the colums of the table. It is also where each group
resulting from the &lt;a href=&#34;#org-target--filter&#34;&gt;HAVING filter&lt;/a&gt; should now generate a single result
row, by this process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The part number, weight, color and maximum quantity are extracted from the Dictionary&lt;/li&gt;
&lt;li&gt;The weight is converted to grams&lt;/li&gt;
&lt;li&gt;Two literals are added (&amp;lsquo;Weight in grams =&amp;rsquo;, &amp;lsquo;Max Quantity =&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;All these insertions are ordered. The result looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PNO&lt;/th&gt;
&lt;th&gt;TEXT1&lt;/th&gt;
&lt;th&gt;GMWT&lt;/th&gt;
&lt;th&gt;COLOR&lt;/th&gt;
&lt;th&gt;TEXT2&lt;/th&gt;
&lt;th&gt;MQTY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;Weight in grams =&lt;/td&gt;
&lt;td&gt;5448&lt;/td&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;td&gt;Max Quantity =&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P5&lt;/td&gt;
&lt;td&gt;Weight in grams =&lt;/td&gt;
&lt;td&gt;5448&lt;/td&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;td&gt;Max Quantity =&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;so-what&#34;&gt;So what&lt;/h2&gt;
&lt;p&gt;I hope the reader will leave with a better appreciation of what a SQL
&lt;code&gt;SELECT&lt;/code&gt; expression actually is, instead of what it looks like. I also
think that understanding the concept of substantial vs accidental form
can help the reader a lot in understanding things like such expression
in the future.&lt;/p&gt;
&lt;p&gt;I also think a point that deserves attention is how worse the &lt;code&gt;SELECT&lt;/code&gt;
expression becomes by SQL&amp;rsquo;s introduction of operators that don&amp;rsquo;t fit the
relational algebra (&lt;code&gt;GROUP BY&lt;/code&gt; and &lt;code&gt;HAVING&lt;/code&gt; clauses). Besides such, the
&lt;code&gt;SELECT&lt;/code&gt; expression is merely a &lt;code&gt;JOIN-&amp;gt;RESTRICT-&amp;gt;PROJECT&lt;/code&gt; sequence.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war--comparision-2.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, C. J., and Hugh Darwen. 1997. &lt;i&gt;A Guide to the Sql Standard (4th Ed.): A User’s Guide to the Standard Database Language Sql&lt;/i&gt;. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;De Wulf, M. 2012. &lt;i&gt;The System of Thomas Aquinas&lt;/i&gt;. Verlag Editiones Scholasticae.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Kerrl, Gaven. n.d. “Aquinas: Metaphysics.” The Internet Encyclopedia of Philosophy. &lt;a href=&#34;https://web.archive.org/web/20240313230721/https://iep.utm.edu/thomas-aquinas-metaphysics/&#34;&gt;https://web.archive.org/web/20240313230721/https://iep.utm.edu/thomas-aquinas-metaphysics/&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Why updateable views, or, Why modules matter?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/why-updateable-views-or-why-modules-matter/"/>
    <id>https://ebellani.github.io/blog/2024/why-updateable-views-or-why-modules-matter/</id>
    <published>2024-06-06T00:00:00Z</published>
    <updated>2024-06-06T00:00:00Z</updated>
    <summary>Continuing a rich conversation that sparked other posts, I was asked to justify updateable views which, to me, are analogous to module&#39; signatures (a topic for another post). Here&amp;rsquo;s the full exchange.
  Why is the logical model more likely to be correct and immutable from the perspective of the app than the physical one?   This question seems to mistake logical and physical independence.
 Logical independence the ability to change the form without affecting clients.</summary>
    <content type="html">&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7203831867937091584?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7203831867937091584%2C7203924209067008000%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7203831867937091584%2C7204472979404005376%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287203924209067008000%2Curn%3Ali%3Aactivity%3A7203831867937091584%29&amp;amp;dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287204472979404005376%2Curn%3Ali%3Aactivity%3A7203831867937091584%29&#34;&gt;Continuing&lt;/a&gt; a rich conversation that sparked &lt;a href=&#34;/blog/2024/a-real-life-example-of-database-design/&#34;&gt;other&lt;/a&gt; &lt;a href=&#34;/blog/2024/how-to-use-the-relational-model-to-do-database-design/&#34;&gt;posts&lt;/a&gt;, I was asked to
justify updateable views which, to me, are analogous to module&#39;
signatures (a topic for another post). Here&amp;rsquo;s the full exchange.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Why is the logical model more likely to be correct and immutable from
the perspective of the app than the physical one?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This question seems to mistake logical and physical independence.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Logical independence&lt;/dt&gt;
&lt;dd&gt;the ability to change the form without
affecting clients.&lt;/dd&gt;
&lt;dt&gt;Physical independence&lt;/dt&gt;
&lt;dd&gt;the ability to change the implementation
without changing the form.&lt;/dd&gt;
&lt;/dl&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In an updateable view world, how would you explain deadlocks
occurring to the developers consuming the model (since they can no
longer &amp;ldquo;see&amp;rdquo; the physical tables that implement it)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, how will you explain the performance characteristics of
that model when someone updates the updatable view (example: updating
a column that is a primary key is MUCH cheaper then one that is a
foreign key - yet they look the same in the logical representation
shows to the developer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the same line of reasoning: How do you explain to developers why
there is a vastly different performance characteristics selecting
data from the same view even though queries look almost identical?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;All these seem to boil down to: how do you explain performance and
concurrency issues to the clients of the view? I&amp;rsquo;ll make an analogy with
RPC endpoints, which are the most widely used alternative to updateable
views. Such endpoints use documentation to explain their capabilities
limitations to their clients.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Which skill is more common and cheapest to acquire: A database
developer who can create such a logical model or the developer who
can modify apps in case we got something about the model wrong?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The logical model will be created, and SQL is a better language for
that, since it at least can be declarative. In that sense, I think SQL
is cheaper because it provides a better language than the ones mostly
used. But the real advantages are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoidable rework. The logical contract is done once. In RPC
alternatives such contract can be implemented in multiple apps.&lt;/li&gt;
&lt;li&gt;Consistency. Having the DBMS be the source of truth instead of
multiple DBMS instances avoids consistency problems, which are widely
considered the most expensive problems in the industry.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war--comparision.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A real life example of database design</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/"/>
    <id>https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/</id>
    <published>2024-05-27T00:00:00Z</published>
    <updated>2024-05-27T00:00:00Z</updated>
    <summary>In a followup to How to use the relational model to do database design?, I was asked to provide an example to illustrate the point:
 Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car (it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD and also let say we allow truck types of cars with 6 wheels. Cars have various engine types and depending on the model of car, some colours are available and some are not.</summary>
    <content type="html">&lt;p&gt;In a followup to &lt;a href=&#34;/blog/2024/how-to-use-the-relational-model-to-do-database-design/&#34;&gt;How to use the relational model to do database design?&lt;/a&gt;,
I was asked to provide an example to illustrate the point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car
(it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD
and also let say we allow truck types of cars with 6 wheels. Cars have
various engine types and depending on the model of car, some colours are
available and some are not. How would you apply the logical design to
this idea and where would such a design lead you if you were to
implement it into the physical world?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a list of predicates that provide such an example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists car of models &lt;code&gt;$MOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have transmission &lt;code&gt;$TRA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have engines &lt;code&gt;$ENG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have colors &lt;code&gt;$COL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have color &lt;code&gt;$COL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have engine &lt;code&gt;$ENG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have transmission &lt;code&gt;$TRA&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/burning-cathedral-spanish-civil-war.jpg&#34;
         alt=&#34;Figure 1: Spanish cathedral destroyed by communist arson, circa 1937&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Spanish cathedral destroyed by communist arson, circa 1937&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</content>
    
    
    <category term="blog"/>
    
  </entry>
  
</feed>
