<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eduardo&#39;s blog</title>
  <link href="https://ebellani.github.io/blog/"/>
  
    <link href="https://ebellani.github.io/blog/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>2024-08-08T00:23:47Z</updated>
  <author>
    <name>Eduardo Bellani</name>
    
  </author>
  <generator>Hugo</generator>
  <id>https://ebellani.github.io/blog/</id>
  
  <entry>
    <title>Crowdstrike&#39;s outage should not have happened, and the company is missing the point on how to avoid it in the future</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/analyzing-crowdstrike-s-root-cause-analysis-or-on-missing-the-point-about-quality/"/>
    <id>https://ebellani.github.io/blog/2024/analyzing-crowdstrike-s-root-cause-analysis-or-on-missing-the-point-about-quality/</id>
    <published>2024-08-07T00:00:00Z</published>
    <updated>2024-08-07T00:00:00Z</updated>
    <summary>A global IT outage occurred on [2024-07-18 Thu], with several industries having significant economic problems (see Appendix 1: The impact for some quotes on what happened). The outage what caused by a bug in the remote update system of the software of Crowdstrike, a popular Threat Intelligence/Response company.
The company has published the Post Incident Review(Crowdstrike 2024a) right after the incident and has just released its root cause analysis (Crowdstrike 2024b).</summary>
    <content type="html">&lt;p&gt;A global IT outage occurred on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2024-07-18 Thu]&lt;/span&gt;&lt;/span&gt;, with several industries
having significant economic problems (see &lt;a href=&#34;#crowdstrike-appendix-1&#34;&gt;Appendix 1: The impact&lt;/a&gt; for
some quotes on what happened). The outage what caused by a bug in the
remote update system of the software of Crowdstrike, a popular Threat
Intelligence/Response company.&lt;/p&gt;
&lt;p&gt;The company has published the Post Incident
Review(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Crowdstrike 2024a&lt;/a&gt;) right
after the incident and has just released its root cause analysis
(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Crowdstrike 2024b&lt;/a&gt;). Reading them has
led me to write this article, specially the proposed mitigations.&lt;/p&gt;
&lt;p&gt;According to the RCA, the essence of what happened was an index out of
bounds, which is a special case of a buffer overflow and considered an
&lt;strong&gt;undefined behavior in C++&lt;/strong&gt;, the language that seems to be used to
develop crowdstrike&amp;rsquo; system(&lt;a href=&#34;#citeproc_bib_item_6&#34;&gt;Stack 2024&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Here then we get to the core of my argument: For a software of this
criticality, such problem should &lt;strong&gt;not be possible&lt;/strong&gt;. The technology to
ensure such has existed for decades already, as can be see by this
quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; we can continue to add contracts to the code until every subprogram
has a fully functional specification. By this we mean that every
subprogram has a postcondition that specifies the value of each of its
outputs and a precondition as required to constrain the input
space. Further type invariants may also be added over and above those
already present from Gold level. Once the implementation has been
completed against this full specification and all VCs generated by the
analyzer have been proved, we have reached Platinum level of SPARK
assurance.&lt;/p&gt;
&lt;p&gt;Due to the additional effort involved in developing the specification
and proof to this level, Platinum will only be appropriate for the most
critical applications. However, it is worth considering a reduction in
unit testing for functional verification if Platinum-level proof has
been achieved, since we *know that the program will return the correct
result for all inputs, not just for those we have been able to
test*. (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Chapman et al. 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Furthermore, all the technical mitigations proposed in the RCA (see the
full list of problems found and their proposals in
&lt;a href=&#34;#crowdstrike-appendix-2&#34;&gt;Appendix 2:  What happened&lt;/a&gt;) amount to just plugging holes. But safety
cannot be achieved in such way, safety needs to be designed into the
design, tools and languages used from the start of such endeavor.&lt;/p&gt;
&lt;p&gt;If I were a client of Crowdstrike, I would be worried about the future.&lt;/p&gt;
&lt;h2 id=&#34;crowdstrike-appendix-1&#34;&gt;Appendix 1: The impact&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A major IT fault has hit services and infrastructure around the world,
with aviation, banking, healthcare and financial services among the
sectors affected.(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Banfield-Nwachi 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;The CrowdStrike outage didn&amp;rsquo;t just delay flights and make it harder to
order coffee. It also affected doctor&amp;rsquo;s offices and hospitals, 911
emergency services, hotel check-in and key card systems, and work-issued
computers that were online and grabbing updates when the flawed update
was sent out. In addition to providing fixes for client PCs and virtual
machines hosted in its Azure cloud, Microsoft says it has been working
with Google Cloud Platform, Amazon Web Services, and &amp;ldquo;other cloud
providers and stakeholders&amp;rdquo; to provide fixes to Windows VMs running in
its competitors&amp;rsquo; clouds. (&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Cunningham 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;While software updates may occasionally cause disturbances, significant
incidents like the CrowdStrike event are infrequent. We currently
estimate that CrowdStrike’s update affected 8.5 million Windows devices,
or less than one percent of all Windows machines. While the percentage
was small, the broad economic and societal impacts reflect the use of
CrowdStrike by enterprises that run many critical services. (&lt;a href=&#34;#citeproc_bib_item_7&#34;&gt;Weston 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;crowdstrike-appendix-2&#34;&gt;Appendix 2:  What happened&lt;/h2&gt;
&lt;p&gt;Here are the list of problems found and their mitigations proposed by
the RCA(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Crowdstrike 2024b&lt;/a&gt;) (slightly
reworded for space eficiency):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Finding&lt;/th&gt;
&lt;th&gt;Mitigation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The number of input fields .. not validated at sensor compile time&lt;/td&gt;
&lt;td&gt;Validate the number of input fields at compile time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Missing runtime array bounds check&lt;/td&gt;
&lt;td&gt;Add runtime input array bounds checks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lack of variety in testing&lt;/td&gt;
&lt;td&gt;Increase test coverage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inconsistency between validator and interpreter&lt;/td&gt;
&lt;td&gt;Fix the instance of inconsistency and add checks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No validation in the interpreter&lt;/td&gt;
&lt;td&gt;Add tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No staged deployment&lt;/td&gt;
&lt;td&gt;Add staged deployment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/St%20Nedelya.jpg&#34;
         alt=&#34;Figure 1: St Nedelya Church, partially destroyed in a terrorist attack by the Bulgarian Communist Party. 16 April 1925.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;St Nedelya Church, partially destroyed in a terrorist attack by the Bulgarian Communist Party. 16 April 1925.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Banfield-Nwachi, Mabel. 2024. “Windows Global It Outage: What We Know so Far.” The Guardian. &lt;a href=&#34;https://www.theguardian.com/technology/article/2024/jul/19/windows-global-it-outage-what-we-know-so-far&#34;&gt;https://www.theguardian.com/technology/article/2024/jul/19/windows-global-it-outage-what-we-know-so-far&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Chapman, Roderick, Claire Dross, Stuart Matthews, and Yannick Moy. 2024. “Co-Developing Programs and Their Proof of Correctness.” &lt;i&gt;Commun. Acm&lt;/i&gt; 67 (3): 84–94. &lt;a href=&#34;https://doi.org/10.1145/3624728&#34;&gt;https://doi.org/10.1145/3624728&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Crowdstrike. 2024a. “Crowdstrike Preliminary Post Incident Review (Pir): Content Configuration Update Impacting the Falcon Sensor and the Windows Operating System (Bsod).” Crowdstrike blog. &lt;a href=&#34;https://www.crowdstrike.com/wp-content/uploads/2024/07/CrowdStrike-PIR-Executive-Summary.pdf&#34;&gt;https://www.crowdstrike.com/wp-content/uploads/2024/07/CrowdStrike-PIR-Executive-Summary.pdf&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;———. 2024b. “External Technical Root Cause Analysis — Channel File 291.” Crowdstrike blog. &lt;a href=&#34;https://www.crowdstrike.com/wp-content/uploads/2024/08/Channel-File-291-Incident-Root-Cause-Analysis-08.06.2024.pdf&#34;&gt;https://www.crowdstrike.com/wp-content/uploads/2024/08/Channel-File-291-Incident-Root-Cause-Analysis-08.06.2024.pdf&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Cunningham, Andrew. 2024. “Microsoft Says 8.5m Systems Hit by Crowdstrike Bsod, Releases Usb Recovery Tool.” Ars Technica. &lt;a href=&#34;https://arstechnica.com/information-technology/2024/07/microsoft-says-8-5m-systems-hit-by-crowdstrike-bsod-releases-usb-recovery-tool/&#34;&gt;https://arstechnica.com/information-technology/2024/07/microsoft-says-8-5m-systems-hit-by-crowdstrike-bsod-releases-usb-recovery-tool/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_6&#34;&gt;&lt;/a&gt;Stack, The. 2024. “Crowdstrike Promises Rca as c++ Null Pointer Claim Contested.” The stack.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_7&#34;&gt;&lt;/a&gt;Weston, David. 2024. “Helping Our Customers through the Crowdstrike Outage.” Microsoft Official Blog. &lt;a href=&#34;https://blogs.microsoft.com/blog/2024/07/20/helping-our-customers-through-the-crowdstrike-outage/&#34;&gt;https://blogs.microsoft.com/blog/2024/07/20/helping-our-customers-through-the-crowdstrike-outage/&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to avoid frustration with software architecture</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-avoid-frustration-with-software-architecture/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-avoid-frustration-with-software-architecture/</id>
    <published>2024-07-18T00:00:00Z</published>
    <updated>2024-07-18T00:00:00Z</updated>
    <summary>It is becoming more common for companies to come out with stories on the downsides of distributed microservice architectures1(Kolny 2023; Ghemawat et al. 2023).
Instead of hopping in this bandwagon, as tempting as this might be, I want to suggest how could one avoid being caught in such situation in the first place.
Fundamentally, I think the problem that originated the current dissatisfaction with microservices is a double confusion:
 between the form (modules) and the matter (interacting running processes) of software and(Ainsworth 2024); between the the form (modules) of software and the form of software building organizations (teams, executing environments, deployment pipelines &amp;hellip;).</summary>
    <content type="html">&lt;p&gt;It is becoming more common for companies to come out with stories on the
downsides of distributed microservice
architectures&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Kolny 2023&lt;/a&gt;; &lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Ghemawat et al. 2023&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Instead of hopping in this bandwagon, as tempting as this might be, I
want to suggest how could one avoid being caught in such situation in
the first place.&lt;/p&gt;
&lt;p&gt;Fundamentally, I think the problem that originated the current
dissatisfaction with microservices is a double confusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;between the form (modules) and the matter (interacting running
processes) of software and(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Ainsworth 2024&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;between the the form (modules) of software and the form of software
building organizations (teams, executing environments,
deployment pipelines &amp;hellip;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interestingly enough, such structures are the 3 categories of software
architecture proposed in a standard Software Architecture
book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl&gt;
&lt;dt&gt;Module structures&lt;/dt&gt;
&lt;dd&gt;partition systems into implementation units&lt;/dd&gt;
&lt;dt&gt;Component-and-connector (C&amp;amp;C) structures&lt;/dt&gt;
&lt;dd&gt;focus on the way the
elements interact with each other at runtime to carry out the system’s
functions.&lt;/dd&gt;
&lt;dt&gt;Allocation structures&lt;/dt&gt;
&lt;dd&gt;establish the mapping from software
structures to the system’s non-software structures, such as its
organization, or its development, test, and execution
environments. (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Bass et al. 2021&lt;/a&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;so-what&#34;&gt;So what?&lt;/h2&gt;
&lt;p&gt;In order to avoid confusion and unecessary costs, the next time you are
discussing software architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you know which category you are talking about;&lt;/li&gt;
&lt;li&gt;Insist on exaustive definitions of key terms (such as &lt;code&gt;module&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Be sure to refer to reputable sources.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Beeldenstorm_%28Iconoclastic_Fury%29_in_Antwerpen_1566_Frans_Hogenberg.jpg&#34;
         alt=&#34;Figure 1: Print of the destruction in the Church of Our Lady in Antwerp, the &amp;amp;ldquo;signature event&amp;amp;rdquo; of the Beeldenstorm, 20 August 1566, by Frans Hogenberg&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Print of the destruction in the Church of Our Lady in Antwerp, the &amp;ldquo;signature event&amp;rdquo; of the Beeldenstorm, 20 August 1566, by Frans Hogenberg&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Ainsworth, Thomas. 2024. “Form vs. Matter.” In &lt;i&gt;The Stanford Encyclopedia of Philosophy&lt;/i&gt;, edited by Edward N. Zalta and Uri Nodelman, Fall 2024. https://plato.stanford.edu/entries/form-matter/; Metaphysics Research Lab, Stanford University.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Bass, L., P. Clements, R. Kazman, and an O’Reilly Media Company Safari. 2021. &lt;i&gt;Software Architecture in Practice, 4th Edition&lt;/i&gt;. Sei Series in Software Engineering. Addison-Wesley Professional.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Ghemawat, Sanjay, Robert Grandl, Srdjan Petrovic, Michael Whittaker, Parveen Patel, Ivan Posva, and Amin Vahdat. 2023. “Towards Modern Development of Cloud Applications.” In &lt;i&gt;Proceedings of the 19th Workshop on Hot Topics in Operating Systems&lt;/i&gt;, 110–17. Hotos ’23. Providence, RI, USA: Association for Computing Machinery. &lt;a href=&#34;https://doi.org/10.1145/3593856.3595909&#34;&gt;https://doi.org/10.1145/3593856.3595909&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Kolny, Marcin. 2023. “Scaling up the Prime Video Audio/Video Monitoring Service and Reducing Costs by 90\%.” &lt;a href=&#34;https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90&#34;&gt;https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Including a claim of cost reductions of over 90%!&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to avoid a common career pitfall</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-avoid-a-common-career-pitfall/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-avoid-a-common-career-pitfall/</id>
    <published>2024-07-02T00:00:00Z</published>
    <updated>2024-07-02T00:00:00Z</updated>
    <summary>If the way you think others see you is in stark contrast to how others actually see you, you are in danger of derailing in your career.
To avoid that, here are 3 steps, and a reference:
 Ask and embrace feedback from bosses, peers and followers1, Expose your most cherished ideas to the most intense forms of public scrutiny you can find, See ways to measure yourself, such as 360 feedback mechanisms and validated personality assessments.</summary>
    <content type="html">&lt;p&gt;If the way you think others see you is in stark contrast to how others
actually see you, you are in danger of derailing in your career.&lt;/p&gt;
&lt;p&gt;To avoid that, here are 3 steps, and a reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask and &lt;strong&gt;embrace&lt;/strong&gt; feedback from bosses, peers and followers&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;/li&gt;
&lt;li&gt;Expose your most cherished ideas to the most intense forms of public scrutiny you can find,&lt;/li&gt;
&lt;li&gt;See ways to measure yourself, such as 360 feedback mechanisms and
validated personality assessments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It all boils down to reducing your own cognitive
dissonance(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Festinger 1957&lt;/a&gt;), which is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; The maximum dissonance which could exist &amp;hellip;  determined by the
resistance to admitting that he had been wrong or foolish.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/French_School_-_View_of_the_abbey_of_Saint-Victor_%28Saint_Victor%29_former_abbey_of_regular_canons_-_%28MeisterDrucke-917697%29.jpg&#34;
         alt=&#34;Figure 1: Abbey of St Victor, before being destroyed by republican revolutionaries during the French Revolution&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Abbey of St Victor, before being destroyed by republican revolutionaries during the French Revolution&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Festinger, L. 1957. &lt;i&gt;A Theory of Cognitive Dissonance&lt;/i&gt;. Mass Communication Series. Stanford University Press.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I like the terms superordinate, coordinates and subordinates, but
they are not in common usage&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Integrity Constraints and business value</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/constraints-and-business-value/"/>
    <id>https://ebellani.github.io/blog/2024/constraints-and-business-value/</id>
    <published>2024-06-26T00:00:00Z</published>
    <updated>2024-06-26T00:00:00Z</updated>
    <summary>Again with this database business? Let me try to motivate you dear reader before I start again with a illustrative case: SQL Injections!
 SQL injection is one of the oldest vulnerabilities still present in the OWASP TOP 10 (CyberSecura 2021) A well documented case puts the cost of one SQL Injection in USD 196k (Group 2014)  Ok, and how these are related to databases, and more specifically constraints? And what are these constraints?</summary>
    <content type="html">&lt;p&gt;Again with this database business? Let me try to motivate you dear
reader before I start again with a illustrative case: SQL Injections!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL injection is one of the oldest vulnerabilities still present in
the OWASP TOP 10 (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;CyberSecura 2021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A well documented case puts the cost of one SQL Injection in USD 196k
(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Group 2014&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, and how these are related to databases, and more specifically
constraints? And what are these constraints?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt; are informal business rules (BR) expressed in natural
language that constrain the values of the shared properties of entity
members of a class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrity constraints&lt;/strong&gt; are the formalized versions of the constraints
as first order predicates that represent them in the database, expressed
in a specific data language and enforced by the DBMS in the database for
all applications, with potential reduction in application development
and maintenance estimated at as high as 80%.&lt;/p&gt;
&lt;p&gt;Integrity independence (II)—DBMS-enforced integrity in the database—was
a major objective and is an advantage of database management in general
and relational database management in particular (and is enshrined as
one of the famous 12 Codd rules). It is much superior to
application-enforced integrity— &lt;strong&gt;a redundant, unreliable and prone to
error development and maintenance burden— which was readily subvertible&lt;/strong&gt;. (&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Pascal 2016&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, say I got your attention about SQL Injections and you have some
clarity on what I mean by constraints. How do I connect these 2 topics?&lt;/p&gt;
&lt;p&gt;Here is how: if developers were aware that you could encode your
authentication/authorization rules at the DBMS level as integrity
constraints, SQL injections would be impossible!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; why do it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All access control performed by database – even if application code is compromised&lt;/li&gt;
&lt;li&gt;Essentially, users can be given freeform sql access – database is a
Fort Knox and will not allow unauthorized operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Developer productivity:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No more time spent on access control and worrying about security&lt;/li&gt;
&lt;li&gt;Even the new guy can now safely work on applications, api’s etc.&lt;/li&gt;
&lt;li&gt;Worst case, api breaks, but the data is perfectly safe (&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Swart 2019&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consider the double effect of properly encoding this integrity
constraint (data access) where it belongs (with the system managing the data):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You avoid an entire class of common and expensive problems&lt;/li&gt;
&lt;li&gt;Because of that, your developers can work on your actual product
instead of solving this non issue over and over again.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;CyberSecura, Consultant. 2021. “Sql Injection : Why Is This Attack Still Possible in 2021?” &lt;a href=&#34;https://www.cybersecura.com/en/post/sql-injection-why-is-this-attack-still-possible-in-2021&#34;&gt;https://www.cybersecura.com/en/post/sql-injection-why-is-this-attack-still-possible-in-2021&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Group, NTT. 2014. “Global Threat Intelligence Report.” NTT Innovation Institute.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Pascal, Fabian. 2016. &lt;i&gt;The Dbdebunk Guide to Misconceptions About Data Fundamentals&lt;/i&gt;. DATABASE DEBUNKINGS.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Swart, Bennie. 2019. “Row Level Security.” Postgres Conference. Postgres Conference US. &lt;a href=&#34;https://postgresconf.org/system/events/document/000/000/996/pgconf_us_2019.pdf&#34;&gt;https://postgresconf.org/system/events/document/000/000/996/pgconf_us_2019.pdf&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Substantial and accidental forms of a SQL expression</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/substantial-and-accidental-forms-of-a-sql-expression/"/>
    <id>https://ebellani.github.io/blog/2024/substantial-and-accidental-forms-of-a-sql-expression/</id>
    <published>2024-06-20T00:00:00Z</published>
    <updated>2024-06-20T00:00:00Z</updated>
    <summary>Multiplicity of parts, variety, and unity of plan which
combines the parts into a coherent whole, &amp;ndash;
such are the elements of order found in all beauty.
(De Wulf 2012)
 I have been working with data intensive applications for a while and of course that means exposure to a lot of SQL, both personally and training other developers.
In these experiences I have noticed that it is sometimes harder than it should be to grasp what SQL is doing, specially since its accidental form makes understanding its substantial form so hard.</summary>
    <content type="html">&lt;div class=&#34;verse&#34;&gt;
&lt;p&gt;Multiplicity of parts, variety, and unity of plan which&lt;br /&gt;
combines the parts into a coherent whole, &amp;ndash;&lt;br /&gt;
such are the elements of order found in all beauty.&lt;br /&gt;
(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;De Wulf 2012&lt;/a&gt;)&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have been working with data intensive applications for a while and of
course that means exposure to a lot of SQL, both personally and training
other developers.&lt;/p&gt;
&lt;p&gt;In these experiences I have noticed that it is sometimes harder than it
should be to grasp what SQL is doing, specially since its accidental
form makes understanding its substantial form so hard. In this post I&amp;rsquo;m
going to try to help the reader separate the two and understand SQL
better.&lt;/p&gt;
&lt;p&gt;But first, some definitions of terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; &lt;strong&gt;form&lt;/strong&gt; is the principle of organization of a thing’s matter, or the
thing’s intelligible nature, form can be of two kinds.&lt;/p&gt;
&lt;p&gt;&amp;hellip; (it) can be &lt;strong&gt;substantial&lt;/strong&gt;, organizing the matter into the
kind of thing that the substance is.&lt;/p&gt;
&lt;p&gt;On the other hand, form can be &lt;strong&gt;accidental&lt;/strong&gt;, organising some part of an
already constituted substance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;substantial form&lt;/strong&gt; always &amp;hellip; brings a new substance into existence;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accidental form simply informs an already existing substance, and in
doing so it simply modifies some substance. (&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Kerrl, n.d.&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the core problems with SQL and in particular its &lt;code&gt;SELECT&lt;/code&gt;
expression is that the way it is written/read (and the usual
expectations of the terms such as &lt;code&gt;SELECT/FROM&lt;/code&gt; &amp;hellip;) is very different
from what is actually taking place.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s discuss this fact starting from an example (the example and much
of the discussion are taken from (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date and Darwen 1997&lt;/a&gt;))&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Weight in grams =&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TEXT1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WEIGHT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;454&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GMWT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Max Quantity =&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TEXT2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MQTY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Red&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WEIGHT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HAVING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;350&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difficulty here starts right at the begging, since the &lt;code&gt;SELECT&lt;/code&gt;
clause is the first to be read and written, but it is the &lt;strong&gt;last&lt;/strong&gt; to be
evaluated. Here is how to interpret this &lt;code&gt;SELECT&lt;/code&gt; expression:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--join&#34;&gt;&lt;/span&gt;: The source of the data. An usually overseen point is
that the &lt;code&gt;FROM&lt;/code&gt; clause is actually a &lt;code&gt;JOIN&lt;/code&gt; (a &lt;code&gt;CROSS JOIN&lt;/code&gt;
specifically).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHERE&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--restriction&#34;&gt;&lt;/span&gt;: The result of the &lt;code&gt;JOIN&lt;/code&gt; of the
&lt;a href=&#34;#org-target--join&#34;&gt;previous step&lt;/a&gt; is reduced by elimination of rows (a process
called &lt;code&gt;RESTRICTION&lt;/code&gt; in the Relational Algebra).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--dictionary&#34;&gt;&lt;/span&gt;: This is one of the most complex parts of
the expression because it goes outside the Relational Algebra. You
can think of it as creating, from the &lt;a href=&#34;#org-target--restriction&#34;&gt;restricted table&lt;/a&gt;, a Dictionary
where the keys are a combination of the values of the defined columns
and the referenced values are all the rows where the keys exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE HOWEVER&lt;/strong&gt; that such Dictionary is &lt;strong&gt;NOT&lt;/strong&gt; a proper table. And that is why a
&lt;code&gt;GROUP BY&lt;/code&gt; clause will always demand a corresponding &lt;code&gt;SELECT&lt;/code&gt; clause
that turns such Dictionary into a proper table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HAVING&lt;/strong&gt; &lt;span class=&#34;org-target&#34; id=&#34;org-target--filter&#34;&gt;&lt;/span&gt;: This clause applies to the &lt;a href=&#34;#org-target--dictionary&#34;&gt;Dictionary values
generated by GROUP BY&lt;/a&gt;, filtering all rows that do not match the
condition. This is another operator that sits outside the Relational
Algebra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; : This is called a &lt;code&gt;PROJECTION&lt;/code&gt; in Relational Algebra. It is
where you pick the colums of the table. It is also where each group
resulting from the &lt;a href=&#34;#org-target--filter&#34;&gt;HAVING filter&lt;/a&gt; should now generate a single result
row, by this process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The part number, weight, color and maximum quantity are extracted from the Dictionary&lt;/li&gt;
&lt;li&gt;The weight is converted to grams&lt;/li&gt;
&lt;li&gt;Two literals are added (&amp;lsquo;Weight in grams =&amp;rsquo;, &amp;lsquo;Max Quantity =&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;All these insertions are ordered. The result looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PNO&lt;/th&gt;
&lt;th&gt;TEXT1&lt;/th&gt;
&lt;th&gt;GMWT&lt;/th&gt;
&lt;th&gt;COLOR&lt;/th&gt;
&lt;th&gt;TEXT2&lt;/th&gt;
&lt;th&gt;MQTY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;Weight in grams =&lt;/td&gt;
&lt;td&gt;5448&lt;/td&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;td&gt;Max Quantity =&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P5&lt;/td&gt;
&lt;td&gt;Weight in grams =&lt;/td&gt;
&lt;td&gt;5448&lt;/td&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;td&gt;Max Quantity =&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;so-what&#34;&gt;So what&lt;/h2&gt;
&lt;p&gt;I hope the reader will leave with a better appreciation of what a SQL
&lt;code&gt;SELECT&lt;/code&gt; expression actually is, instead of what it looks like. I also
think that understanding the concept of substantial vs accidental form
can help the reader a lot in understanding things like such expression
in the future.&lt;/p&gt;
&lt;p&gt;I also think a point that deserves attention is how worse the &lt;code&gt;SELECT&lt;/code&gt;
expression becomes by SQL&amp;rsquo;s introduction of operators that don&amp;rsquo;t fit the
relational algebra (&lt;code&gt;GROUP BY&lt;/code&gt; and &lt;code&gt;HAVING&lt;/code&gt; clauses). Besides such, the
&lt;code&gt;SELECT&lt;/code&gt; expression is merely a &lt;code&gt;JOIN-&amp;gt;RESTRICT-&amp;gt;PROJECT&lt;/code&gt; sequence.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war--comparision-2.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, C. J., and Hugh Darwen. 1997. &lt;i&gt;A Guide to the Sql Standard (4th Ed.): A User’s Guide to the Standard Database Language Sql&lt;/i&gt;. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;De Wulf, M. 2012. &lt;i&gt;The System of Thomas Aquinas&lt;/i&gt;. Verlag Editiones Scholasticae.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Kerrl, Gaven. n.d. “Aquinas: Metaphysics.” The Internet Encyclopedia of Philosophy. &lt;a href=&#34;https://web.archive.org/web/20240313230721/https://iep.utm.edu/thomas-aquinas-metaphysics/&#34;&gt;https://web.archive.org/web/20240313230721/https://iep.utm.edu/thomas-aquinas-metaphysics/&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Why updateable views, or, Why modules matter?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/why-updateable-views-or-why-modules-matter/"/>
    <id>https://ebellani.github.io/blog/2024/why-updateable-views-or-why-modules-matter/</id>
    <published>2024-06-06T00:00:00Z</published>
    <updated>2024-06-06T00:00:00Z</updated>
    <summary>Continuing a rich conversation that sparked other posts, I was asked to justify updateable views which, to me, are analogous to module&#39; signatures (a topic for another post). Here&amp;rsquo;s the full exchange.
  Why is the logical model more likely to be correct and immutable from the perspective of the app than the physical one?   This question seems to mistake logical and physical independence.
 Logical independence the ability to change the form without affecting clients.</summary>
    <content type="html">&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7203831867937091584?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7203831867937091584%2C7203924209067008000%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7203831867937091584%2C7204472979404005376%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287203924209067008000%2Curn%3Ali%3Aactivity%3A7203831867937091584%29&amp;amp;dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287204472979404005376%2Curn%3Ali%3Aactivity%3A7203831867937091584%29&#34;&gt;Continuing&lt;/a&gt; a rich conversation that sparked &lt;a href=&#34;/blog/2024/a-real-life-example-of-database-design/&#34;&gt;other&lt;/a&gt; &lt;a href=&#34;/blog/2024/how-to-use-the-relational-model-to-do-database-design/&#34;&gt;posts&lt;/a&gt;, I was asked to
justify updateable views which, to me, are analogous to module&#39;
signatures (a topic for another post). Here&amp;rsquo;s the full exchange.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Why is the logical model more likely to be correct and immutable from
the perspective of the app than the physical one?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This question seems to mistake logical and physical independence.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Logical independence&lt;/dt&gt;
&lt;dd&gt;the ability to change the form without
affecting clients.&lt;/dd&gt;
&lt;dt&gt;Physical independence&lt;/dt&gt;
&lt;dd&gt;the ability to change the implementation
without changing the form.&lt;/dd&gt;
&lt;/dl&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In an updateable view world, how would you explain deadlocks
occurring to the developers consuming the model (since they can no
longer &amp;ldquo;see&amp;rdquo; the physical tables that implement it)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, how will you explain the performance characteristics of
that model when someone updates the updatable view (example: updating
a column that is a primary key is MUCH cheaper then one that is a
foreign key - yet they look the same in the logical representation
shows to the developer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the same line of reasoning: How do you explain to developers why
there is a vastly different performance characteristics selecting
data from the same view even though queries look almost identical?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;All these seem to boil down to: how do you explain performance and
concurrency issues to the clients of the view? I&amp;rsquo;ll make an analogy with
RPC endpoints, which are the most widely used alternative to updateable
views. Such endpoints use documentation to explain their capabilities
limitations to their clients.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Which skill is more common and cheapest to acquire: A database
developer who can create such a logical model or the developer who
can modify apps in case we got something about the model wrong?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The logical model will be created, and SQL is a better language for
that, since it at least can be declarative. In that sense, I think SQL
is cheaper because it provides a better language than the ones mostly
used. But the real advantages are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoidable rework. The logical contract is done once. In RPC
alternatives such contract can be implemented in multiple apps.&lt;/li&gt;
&lt;li&gt;Consistency. Having the DBMS be the source of truth instead of
multiple DBMS instances avoids consistency problems, which are widely
considered the most expensive problems in the industry.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war--comparision.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A real life example of database design</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/"/>
    <id>https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/</id>
    <published>2024-05-27T00:00:00Z</published>
    <updated>2024-05-27T00:00:00Z</updated>
    <summary>In a followup to How to use the relational model to do database design?, I was asked to provide an example to illustrate the point:
 Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car (it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD and also let say we allow truck types of cars with 6 wheels. Cars have various engine types and depending on the model of car, some colours are available and some are not.</summary>
    <content type="html">&lt;p&gt;In a followup to &lt;a href=&#34;/blog/2024/how-to-use-the-relational-model-to-do-database-design/&#34;&gt;How to use the relational model to do database design?&lt;/a&gt;,
I was asked to provide an example to illustrate the point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car
(it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD
and also let say we allow truck types of cars with 6 wheels. Cars have
various engine types and depending on the model of car, some colours are
available and some are not. How would you apply the logical design to
this idea and where would such a design lead you if you were to
implement it into the physical world?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a list of predicates that provide such an example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists car of models &lt;code&gt;$MOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have transmission &lt;code&gt;$TRA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have engines &lt;code&gt;$ENG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have colors &lt;code&gt;$COL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have color &lt;code&gt;$COL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have engine &lt;code&gt;$ENG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have transmission &lt;code&gt;$TRA&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/burning-cathedral-spanish-civil-war.jpg&#34;
         alt=&#34;Figure 1: Spanish cathedral destroyed by communist arson, circa 1937&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Spanish cathedral destroyed by communist arson, circa 1937&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to use the relational model to do database design?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-use-the-relational-model-to-do-database-design/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-use-the-relational-model-to-do-database-design/</id>
    <published>2024-05-26T00:00:00Z</published>
    <updated>2024-05-26T00:00:00Z</updated>
    <summary>On a recent exchange I was asked the following:
 &amp;hellip; what you mean that you use the relation model to design? &amp;hellip;
 Let&amp;rsquo;s first start with the motivation: Why should one use the relational model(RM) to do database design? Here is my one line answer:
It makes it possible to have and to maintain the integrity of your business rules.
To illustrate this point, here are some examples of problems that one faces when one does not have such integrity:</summary>
    <content type="html">&lt;p&gt;On a recent &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7199813569549328386?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7199813569549328386%2C7199820740962004992%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7199813569549328386%2C7200430915628462080%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287199820740962004992%2Curn%3Ali%3Aactivity%3A7199813569549328386%29&amp;amp;dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287200430915628462080%2Curn%3Ali%3Aactivity%3A7199813569549328386%29%20&#34;&gt;exchange&lt;/a&gt; I was asked the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; what you mean that you use the relation model to design? &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s first start with the motivation: &lt;strong&gt;Why&lt;/strong&gt; should one use the
relational model(RM) to do database design? Here is my one line answer:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It makes it possible to have and to maintain the integrity of your
business rules.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To illustrate this point, here are some examples of problems that one
faces when one does not have such integrity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A status got written to &amp;lsquo;Done&amp;rsquo;, but the data that was expected to be
there was not (eventual consistency)&lt;/li&gt;
&lt;li&gt;Some data that your application depends on got deleted (delete anomaly)&lt;/li&gt;
&lt;li&gt;A join returns more information than expected (update anomaly)&lt;/li&gt;
&lt;li&gt;Slow queries (optimizer problems due to duplicates)
&lt;ul&gt;
&lt;li&gt;Ambiguous duplicates in results (duplicates)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrong query results (NULLs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to the point at hand: How would one use the relational model to
design a database? Let me start by a definition of what is the
relational model:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;An open-ended collection of scalar types, including type BOOLEAN in
particular&lt;/li&gt;
&lt;li&gt;A type generator and an intended interpretation for relations of
types generated thereby&lt;/li&gt;
&lt;li&gt;Facilities for defining variables of such generated
relation types&lt;/li&gt;
&lt;li&gt;A assignment operator for assigning values to such variables&lt;/li&gt;
&lt;li&gt;A complete (but otherwise open-ended) collection of generic operators
for deriving values from other values&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2015&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s define a database:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A database is a set of predicates and instatiations of such as
propositions.&lt;/em&gt; The RM uses relation types to represent predicates. SQL
uses table definitions. The RM uses relations to represent the arguments
of a predicate, SQL uses rows.&lt;/p&gt;
&lt;p&gt;In short, the RM set global constraints on any database design. Here is
a (probably incomplete) list with ways that the RM drives database
design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never allow NULL anywhere (avoid &lt;code&gt;NULL&lt;/code&gt; generating operators, such as &lt;code&gt;OUTER JOIN&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Never allow duplicates (avoid duplicates generating queries, such as &lt;code&gt;&amp;lt;SELECT | UNION&amp;gt; All&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Never depend on position of columns or rows&lt;/li&gt;
&lt;li&gt;Always make sure each table represents one and only one predicate, thus being in 5NF&lt;/li&gt;
&lt;li&gt;Use updateable views to have logical independence (simulate them with triggers)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/SpanishLeftistsShootStatueOfChrist.jpg&#34;
         alt=&#34;Figure 1: Communist firing squad aiming at the Monument of the Sacred Heart on the Cerro de los Angeles, Spain. 31 August 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Communist firing squad aiming at the Monument of the Sacred Heart on the Cerro de los Angeles, Spain. 31 August 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, Chris. 2015. &lt;i&gt;Sql and relational theory: How to write accurate sql code&lt;/i&gt;. Paperback. O’Reilly Media.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to (not) lock yourself into architectural drawbacks, or, Microservice architecture as the reification of Pi-Calculus</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/microservices-as-reification/"/>
    <id>https://ebellani.github.io/blog/2024/microservices-as-reification/</id>
    <published>2024-05-04T00:00:00Z</published>
    <updated>2024-05-04T00:00:00Z</updated>
    <summary>Reification: the treatment of something abstract as a material or concrete thing, as in the following lines from Matthew Arnold’s poem “Dover Beach”: (Britannica 2018)
/The Sea of Faith
Was once, too, at the full, and round earth’s shore
Lay like the folds of a bright girdle furled./
  The microservice architecture(MA) has taken a deep hold in the collective imagination of the software engineering community since at least 20141.</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Reification&lt;/em&gt;: the treatment of something abstract as a material or
concrete thing, as in the following lines from Matthew Arnold’s poem
“Dover Beach”: (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Britannica 2018&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;verse&#34;&gt;
&lt;p&gt;/The Sea of Faith&lt;br /&gt;
Was once, too, at the full, and round earth’s shore&lt;br /&gt;
Lay like the folds of a bright girdle furled./&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The microservice architecture(MA) has taken a deep hold in the
collective imagination of the software engineering community since at
least 2014&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This has happened despite serious and well documented
&lt;a href=&#34;#drawbacks&#34;&gt;drawbacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Such combination calls for an explanation. A sketch of such explanation
is my intent here, starting with what MA is, at bottom. At a later date
I intend to provide a history of how it came to be a dominant
architecture on our industry.&lt;/p&gt;
&lt;p&gt;My position is that MA is a reification(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Britannica 2018&lt;/a&gt;)
of abstract processes as defined by the Pi-Calculus (PC). Why do I think
of that? Let&amp;rsquo;s start by defining things.&lt;/p&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;PC is a model of message-based concurrent computation and its essential
features are(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Pierce 1997&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;focusing on interaction via communication rather than shared
variables,&lt;/li&gt;
&lt;li&gt;describing concurrent systems using a small set of primitive operators
and&lt;/li&gt;
&lt;li&gt;on deriving useful algebraic laws for manipulating expressions written
using these operators.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;More concretely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;
&lt;br /&gt;
π-calculus lets you represent processes, parallel composition of
processes, synchronous communication between processes through channels,
creation of fresh channels, replication of processes, and nondeterminism
&lt;br /&gt;
&amp;hellip;
&lt;br /&gt;
A &lt;strong&gt;process&lt;/strong&gt; is an abstraction of an independent thread of control. A
&lt;strong&gt;channel&lt;/strong&gt; is an abstraction of the communication link between two
processes. Processes interact with each other by sending and receiving
&lt;strong&gt;messages&lt;/strong&gt; over channels.
(&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Wing 2002&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the best definition of the MA that I know of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The microservice architecture pattern structures the system as a
collection of independently deployable services that communicate only
via messages through service interfaces. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Bass et al. 2021&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;how-are-they-mapped&#34;&gt;How are they mapped?&lt;/h2&gt;
&lt;p&gt;So here is PC is mapped to MA:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Processes&lt;/strong&gt; are Services(binaries loaded into memory),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Channels&lt;/strong&gt; are either queues or some form of APIs (RPC or REST),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; are network calls,&lt;/li&gt;
&lt;li&gt;The avoidance of &lt;strong&gt;shared variables&lt;/strong&gt; as an avoidance of a shared DBMS.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The reader might well ask, so what? Isn&amp;rsquo;t that a good thing? Well, no,
it&amp;rsquo;s a very bad thing. Why?&lt;/p&gt;
&lt;p&gt;Because once you mistake a formal entity such as the PC with a material
one such as the MA, you lock yourself out of possibilities and in
specific &lt;a href=&#34;#drawbacks&#34;&gt;drawbacks&lt;/a&gt; that might not exist in other ways to implement the
PC.&lt;/p&gt;
&lt;p&gt;Let me illustrate the point here with a metaphor:&lt;/p&gt;
&lt;p&gt;Say you think the formal entity called &lt;code&gt;Boat&lt;/code&gt; can only be implemented by
&lt;code&gt;Yacht&lt;/code&gt;. You now are locked into the design choices of that concrete
instantiation of the &lt;code&gt;Boat&lt;/code&gt; form. &lt;code&gt;Transatlantic&lt;/code&gt; or &lt;code&gt;Canoe&lt;/code&gt; are not
possible for you.&lt;/p&gt;
&lt;p&gt;Coming back to the case at hand, here are some examples of how you could
implement the pi-calculus without MA:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a language/runtime that supports it, such as Erlang/ERT, SML/NJ or F#/.net.&lt;/li&gt;
&lt;li&gt;Use a framework such as Akka.&lt;/li&gt;
&lt;li&gt;Use a DBMS where several applications share the same DBMS but you use
permissions and views to manage access and have logical independence.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;drawbacks&#34;&gt;Appendix: The Drawbacks&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It hurts performance. The overhead of serializing data and sending it
across the network is increasingly becoming a bottleneck. When
developers over-split their applications, these overheads compound.&lt;/li&gt;
&lt;li&gt;It hurts correctness. It is extremely challenging to reason about the
interactions between every deployed version of every microservice. In
a case study of over 100 catastrophic failures of eight widely used
systems, two-thirds of failures were caused by the interactions
between multiple versions of a system.&lt;/li&gt;
&lt;li&gt;It is hard to manage. Rather than having a single binary to build,
test, and deploy, developers have to manage 𝑛 different binaries, each
on their own release schedule. Running end-to-end tests with a local
instance of the application becomes an engineering feat.&lt;/li&gt;
&lt;li&gt;It freezes APIs. Once a microservice establishes an API, it becomes
hard to change without breaking the other services that consume the
API. Legacy APIs linger around, and new APIs are patched on top.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;It slows down application development. When making changes that affect
multiple microservices, developers cannot implement and deploy the
changes atomically. They have to carefully plan how to introduce the
change across 𝑛 microservices with their own release schedules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Ghemawat et al. 2023&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Cath%c3%a9drale_St_Joseph_de_Phnom_Penh.jpg&#34;
         alt=&#34;Figure 1: Cathedral of Phnom Penhl, destroyed shortly after by the Khmer Rouge. The Ministry of Posts and Telecommunications now stands on the site of the former cathedral&#34; width=&#34;30%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Cathedral of Phnom Penhl, destroyed shortly after by the Khmer Rouge. The Ministry of Posts and Telecommunications now stands on the site of the former cathedral&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Bass, L., P. Clements, R. Kazman, and an O’Reilly Media Company Safari. 2021. &lt;i&gt;Software Architecture in Practice, 4th Edition&lt;/i&gt;. Sei Series in Software Engineering. Addison-Wesley Professional.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Britannica, The Editors of Encyclopaedia. 2018. “Reification.” In &lt;i&gt;Encyclopedia Britannica&lt;/i&gt;. &lt;a href=&#34;https://www.britannica.com/topic/reification&#34;&gt;https://www.britannica.com/topic/reification&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Ghemawat, Sanjay, Robert Grandl, Srdjan Petrovic, Michael Whittaker, Parveen Patel, Ivan Posva, and Amin Vahdat. 2023. “Towards Modern Development of Cloud Applications.” In &lt;i&gt;Proceedings of the 19th Workshop on Hot Topics in Operating Systems&lt;/i&gt;, 110–17. Hotos ’23. Providence, RI, USA: Association for Computing Machinery. &lt;a href=&#34;https://doi.org/10.1145/3593856.3595909&#34;&gt;https://doi.org/10.1145/3593856.3595909&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Pierce, Benjamin C. 1997. “Foundational Calculi for Programming Languages.” In &lt;i&gt;The Computer Science and Engineering Handbook&lt;/i&gt;, edited by Allen B. Tucker, 2190–2207. CRC Press. &lt;a href=&#34;http://dblp.uni-trier.de/db/books/collections/tucker97.html#Pierce97&#34;&gt;http://dblp.uni-trier.de/db/books/collections/tucker97.html#Pierce97&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Wing, Jeannette M. 2002. “Faq on $\Pi$-Calculus.” &lt;a href=&#34;https://www.cs.cmu.edu/~wing/publications/Wing02a.pdf&#34;&gt;https://www.cs.cmu.edu/~wing/publications/Wing02a.pdf&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://trends.google.com/trends/explore?date=all&amp;amp;geo=US&amp;amp;q=microservices&#34;&gt;https://trends.google.com/trends/explore?date=all&amp;amp;geo=US&amp;amp;q=microservices&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;In a certain sense, all externally facing APIs face this. Microservices just make this problem worse by making everything &lt;code&gt;external&lt;/code&gt; and not part of the same checkable runtime.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A practical principle on politics (office or otherwise)</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-practical-principle-on-politics--office-or-otherwise/"/>
    <id>https://ebellani.github.io/blog/2024/a-practical-principle-on-politics--office-or-otherwise/</id>
    <published>2024-04-28T00:00:00Z</published>
    <updated>2024-04-28T00:00:00Z</updated>
    <summary>If you are involved in politics, as a voter or just as an office worker in an unfortunate situation, you would do well to remember this dictum:
 When a public figure tells you something that you want to hear, question his sincerity. When a public figure tells you something you don’t want to hear, believe him.(Lawler 2024)
  Figure 1: The destruction of the original Church of Christ the Saviour in Moscow, Russia</summary>
    <content type="html">&lt;p&gt;If you are involved in politics, as a voter or just as an office worker
in an unfortunate situation, you would do well to remember this dictum:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a public figure tells you something that you want to hear, question
his sincerity. When a public figure tells you something you don’t want
to hear, believe him.(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Lawler 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Christ_saviour_explosion.jpg&#34;
         alt=&#34;Figure 1: The destruction of the original Church of Christ the Saviour in Moscow, Russia&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The destruction of the original Church of Christ the Saviour in Moscow, Russia&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Lawler, Phil. 2024. “What Is Truth? a Journalist Asks Pilate’s Question.” &lt;a href=&#34;https://www.catholicculture.org/commentary/what-is-truth-journalist-asks-pilates-question/&#34;&gt;https://www.catholicculture.org/commentary/what-is-truth-journalist-asks-pilates-question/&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A point about FAANG points</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-point-about-faang/"/>
    <id>https://ebellani.github.io/blog/2024/a-point-about-faang/</id>
    <published>2024-04-14T00:00:00Z</published>
    <updated>2024-04-14T00:00:00Z</updated>
    <summary>As a technologist I often hear variations of the following phrase in my industry:
 Do it because some FAANG(Fernando 2023) company did it.
 The structure of this argument is usually like this:
 Technique or process X is great/bad, Company C does it like this, C is financially successful and famous, Therefore, you should do the same X as C does.  This is a mixture of the fallacies of selection bias, appeal to authority and false cause.</summary>
    <content type="html">&lt;p&gt;As a technologist I often hear variations of the following phrase in my
industry:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do it because some FAANG(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Fernando 2023&lt;/a&gt;) company did it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The structure of this argument is usually like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Technique or process X is great/bad,&lt;/li&gt;
&lt;li&gt;Company C does it like this,&lt;/li&gt;
&lt;li&gt;C is financially successful and famous,&lt;/li&gt;
&lt;li&gt;Therefore, you should do the same X as C does.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a mixture of the fallacies of selection bias, appeal to
authority and false cause. Here are their definitions and some
context-sensitive examples&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;h2 id=&#34;selection-bias&#34;&gt;Selection bias&lt;/h2&gt;
&lt;p&gt;This is a bias introduced by sampling in a way that is not
representative of the population in question.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We should only look at what FAANG companies do (and ignore the ones that
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;did the same and went bankrupt).
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appeal-to-authority&#34;&gt;Appeal to authority&lt;/h2&gt;
&lt;p&gt;You appeal to authority if you back up your reasoning by saying that it
is supported by what some authority says on the subject.&lt;/p&gt;
&lt;p&gt;However, appealing to authority as a reason to believe something is
fallacious whenever the authority appealed to is not really an authority
in this particular subject, when the authority cannot be trusted to tell
the truth, when authorities disagree on this subject (except for the
occasional lone wolf), when the reasoner misquotes the authority, and so
forth.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We should start using managed services because AWS tells us to do so.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;false-cause&#34;&gt;False cause&lt;/h2&gt;
&lt;p&gt;Improperly concluding that one thing is a cause of another. Its four
principal kinds are the Post Hoc Fallacy, the Fallacy of Cum Hoc, Ergo
Propter Hoc, the Regression Fallacy, and the Fallacy of Reversing
Causation.&lt;/p&gt;
&lt;h3 id=&#34;post-hoc&#34;&gt;Post hoc&lt;/h3&gt;
&lt;p&gt;Suppose we notice that an event of kind A is followed in time by an
event of kind B, and then hastily leap to the conclusion that A caused
B. If so, our reasoning contains the Post Hoc Fallacy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;After Facebook build their system with PHP, they became hugely successful.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cum-hoc&#34;&gt;Cum hoc&lt;/h3&gt;
&lt;p&gt;Latin for “with this, therefore because of this.” This is a False Cause
Fallacy that doesn’t depend on time order (as does the &lt;a href=&#34;#post-hoc&#34;&gt;Post hoc&lt;/a&gt;
fallacy), but on any other chance correlation of the supposed cause
being in the presence of the supposed effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Google uses lots of microservices and Kubernetes.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reversing-causation&#34;&gt;Reversing causation&lt;/h3&gt;
&lt;p&gt;Drawing an improper conclusion about causation due to a causal
assumption that reverses cause and effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Microsoft and Google both are huge companies and have R&amp;amp;D centers. We
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;need to have a R&amp;amp;D center to become a huge company
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Do pay attention to successful companies, but only when it is valid to
do so. Having a great business model and timing can allow a company to
survive very bad mistakes (such as Google firing all their project
managers once(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Editors 2017&lt;/a&gt;)).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Reims%20Cathedral%20hit%20during%20a%20German%20shell%20barrage.jpg&#34;
         alt=&#34;Figure 1: Reims Cathedral hit during a German shell barrage, 19 September 1914.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Reims Cathedral hit during a German shell barrage, 19 September 1914.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Editors, Re:Work. 2017. “Google’s Ongoing Effort to Make Managers Awesome.” &lt;a href=&#34;https://web.archive.org/web/20230922045752/http://rework.withgoogle.com/blog/Googles-effort-to-make-managers-awesome/&#34;&gt;https://web.archive.org/web/20230922045752/http://rework.withgoogle.com/blog/Googles-effort-to-make-managers-awesome/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Fernando, Jason. 2023. “Faang Stocks: Definition and Companies Involved.” &lt;a href=&#34;https://web.archive.org/web/20240407224456/https://www.investopedia.com/terms/f/faang-stocks.asp&#34;&gt;https://web.archive.org/web/20240407224456/https://www.investopedia.com/terms/f/faang-stocks.asp&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;(schemas are synonymous to models in this context)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>What is really the matter with the &#39;database&#39;?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/"/>
    <id>https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/</id>
    <published>2024-04-08T00:00:00Z</published>
    <updated>2024-04-08T00:00:00Z</updated>
    <summary>How can we talk straight about a concept when the term that should signify it is equivocated all the time?
I think this is a big part of the problem on discussions about databases. Here are some ways that the term database is widely used in the tech industry:
 A server I&#39;ll access the database in prod. An instance of a DBMS We are running PG 9.3 locally. A design My database will have a user table and a product table.</summary>
    <content type="html">&lt;p&gt;How can we talk straight about a concept when the term that should
signify it is equivocated all the time?&lt;/p&gt;
&lt;p&gt;I think this is a big part of the problem on discussions about
&lt;code&gt;databases&lt;/code&gt;. Here are some ways that the term &lt;code&gt;database&lt;/code&gt; is widely used
in the tech industry:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;A server&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;I&#39;ll access the database in prod.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;An instance of a  DBMS&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;We are running PG 9.3 locally.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A design&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;My database will have a user table and a product table.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A DBMS&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;Let&#39;s use MongoDB as a database!&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A storage strategy&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;I&#39;ll store these as protobufs in my database, it will be faster!&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A group of propositions&lt;/dt&gt;
&lt;dd&gt;(ok, almost no one uses it like this, but
it is what &lt;code&gt;database&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; mean).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Here is a more authoritative source saying the same thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you should be aware that people often use the term database when they
really mean DBMS (in either of the foregoing senses). Here is a typical
example: “Vendor X&amp;rsquo;s database outperformed vendor T s database by a
factor of two to one.” This usage is sloppy, and deprecated, but very,
very common. (The problem is: If we call the DBMS the database, what do
we call the database? Caveat lector!)
(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2003&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can we solve this problem if we don&amp;rsquo;t start by correcting ourselves?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/800px-Cologne_Cathedral_stands_intact_amidst_the_destruction_caused_by_Allied_air_raids,_9_March_1945._CL2169.jpg&#34;
         alt=&#34;Figure 1: Cologne Cathedral stands intact amidst the destruction caused by Allied air raids, 9 March 1945&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Cologne Cathedral stands intact amidst the destruction caused by Allied air raids, 9 March 1945&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, C.J. 2003. &lt;i&gt;An Introduction to Database Systems&lt;/i&gt;. 8th ed. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>The three traditional laws of being</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/"/>
    <id>https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/</id>
    <published>2024-03-24T00:00:00Z</published>
    <updated>2024-03-24T00:00:00Z</updated>
    <summary>The law of identity &amp;lsquo;Whatever is, is.&amp;rsquo; The law of non-contradiction &amp;lsquo;Nothing can both be and not be.&amp;rsquo; The law of excluded middle &amp;lsquo;Everything must either be or not be.&amp;rsquo; (Russell 1912)   Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.
  References .csl-entry{text-indent: -1.5em; margin-left: 1.5em;}Russell, Bertrand.</summary>
    <content type="html">&lt;dl&gt;
&lt;dt&gt;The law of identity&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Whatever is, is.&amp;rsquo;&lt;/dd&gt;
&lt;dt&gt;The law of non-contradiction&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Nothing can both be and not be.&amp;rsquo;&lt;/dd&gt;
&lt;dt&gt;The law of excluded middle&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Everything must either be or not be.&amp;rsquo; (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Russell 1912&lt;/a&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/chartres-rose-window.jpg&#34;
         alt=&#34;Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.&#34; width=&#34;50%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Russell, Bertrand. 1912. &lt;i&gt;The Problems of Philosophy&lt;/i&gt;. Oxford University Press UK.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Who should rule</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/who-should-rule/"/>
    <id>https://ebellani.github.io/blog/2024/who-should-rule/</id>
    <published>2024-03-21T00:00:00Z</published>
    <updated>2024-03-21T00:00:00Z</updated>
    <summary>If you want to become a (better) leader, you should master the four essential characteristics for leaders: integrity, judgment, competence, and vision(Hogan and Kaiser 2005):
 Integrity. A leader must be trusted to be followed. Decisiveness. Making reasonable decisions in a timely manner. Competence. Both your followers and your stakeholders must know that you not only mean well but that you can deliver. Vision. Setting goals under the right strategy is vital for team and company success against its competition.</summary>
    <content type="html">&lt;p&gt;If you want to become a (better) leader, you should master the four
essential characteristics for leaders: integrity, judgment, competence,
and vision(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Hogan and Kaiser 2005&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;. A leader must be trusted to be followed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decisiveness&lt;/strong&gt;. Making reasonable decisions in a timely manner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Competence&lt;/strong&gt;. Both your followers and your stakeholders must know
that you not only mean well but that you can deliver.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vision&lt;/strong&gt;. Setting goals under the right strategy is vital for team
and company success against its competition.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Saint-Sulpice-Nave-Paris.jpg&#34;
         alt=&#34;Figure 1: The nave of the Saint-Sulpice Church in Paris&#34; width=&#34;80%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The nave of the Saint-Sulpice Church in Paris&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Hogan, Robert, and Robert B. Kaiser. 2005. “What We Know About Leadership.” &lt;i&gt;Review of General Psychology&lt;/i&gt; 9 (2): 169–80. &lt;a href=&#34;https://doi.org/10.1037/1089-2680.9.2.169&#34;&gt;https://doi.org/10.1037/1089-2680.9.2.169&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Principles of reliable applications</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/principles-of-reliable-applications/"/>
    <id>https://ebellani.github.io/blog/2024/principles-of-reliable-applications/</id>
    <published>2024-03-19T00:00:00Z</published>
    <updated>2024-03-19T00:00:00Z</updated>
    <summary>The following are adapted from(Perry 2020), using a more database centric approach:
   Principle Implementation     Idempotence Client side ids; Session ids   Immutability Insert only DBMSes (system time in SQL 2016)   Location independence Natural keys   Versioning Additive structures; Temporal dimension on schemas     Figure 1: Gargoyles of Notre-Dame de Paris
  References .csl-entry{text-indent: -1.5em; margin-left: 1.</summary>
    <content type="html">&lt;p&gt;The following are adapted from(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Perry 2020&lt;/a&gt;), using
a more database centric approach:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Principle&lt;/th&gt;
&lt;th&gt;Implementation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Idempotence&lt;/td&gt;
&lt;td&gt;Client side ids; Session ids&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immutability&lt;/td&gt;
&lt;td&gt;Insert only DBMSes (system time in SQL 2016)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location independence&lt;/td&gt;
&lt;td&gt;Natural keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Versioning&lt;/td&gt;
&lt;td&gt;Additive structures; Temporal dimension on schemas&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/notre-dame-gargoyle.jpg&#34;
         alt=&#34;Figure 1: Gargoyles of Notre-Dame de Paris&#34; width=&#34;50%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Gargoyles of Notre-Dame de Paris&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Perry, Michael L. 2020. &lt;i&gt;The art of immutable architecture: Theory and practice of data management in distributed systems&lt;/i&gt;. Paperback. Apress.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
</feed>
