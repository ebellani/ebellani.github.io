<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eduardo&#39;s blog</title>
  <link href="https://ebellani.github.io/blog/"/>
  
    <link href="https://ebellani.github.io/blog/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>2024-04-15T02:46:45Z</updated>
  <author>
    <name>Eduardo Bellani</name>
    
  </author>
  <generator>Hugo</generator>
  <id>https://ebellani.github.io/blog/</id>
  
  <entry>
    <title>A point about FAANG points</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-point-about-faang/"/>
    <id>https://ebellani.github.io/blog/2024/a-point-about-faang/</id>
    <published>2024-04-14T00:00:00Z</published>
    <updated>2024-04-14T00:00:00Z</updated>
    <summary>As a technologist I often hear variations of the following phrase in my industry:
 Do it because some FAANG(Fernando 2023) company did it.
 The structure of this argument is usually like this:
 Technique or process X is great/bad, Company C does it like this, C is financially successful and famous, Therefore, you should do the same as X if you want to increase your chances of becoming like X.</summary>
    <content type="html">&lt;p&gt;As a technologist I often hear variations of the following phrase in my
industry:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do it because some FAANG(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Fernando 2023&lt;/a&gt;) company did it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The structure of this argument is usually like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Technique or process X is great/bad,&lt;/li&gt;
&lt;li&gt;Company C does it like this,&lt;/li&gt;
&lt;li&gt;C is financially successful and famous,&lt;/li&gt;
&lt;li&gt;Therefore, you should do the same as X if you want to increase your
chances of becoming like X.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a mixture of the fallacies of selection bias, appeal to
authority and false cause. Here are their definitions and some
context-sensitive examples&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;h2 id=&#34;selection-bias&#34;&gt;Selection bias&lt;/h2&gt;
&lt;p&gt;This is a bias introduced by sampling in a way that is not
representative of the population in question.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We should only look at what FAANG companies do (and ignore the ones that
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;did the same and went bankrupt).
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appeal-to-authority&#34;&gt;Appeal to authority&lt;/h2&gt;
&lt;p&gt;You appeal to authority if you back up your reasoning by saying that it
is supported by what some authority says on the subject.&lt;/p&gt;
&lt;p&gt;However, appealing to authority as a reason to believe something is
fallacious whenever the authority appealed to is not really an authority
in this particular subject, when the authority cannot be trusted to tell
the truth, when authorities disagree on this subject (except for the
occasional lone wolf), when the reasoner misquotes the authority, and so
forth.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We should start using managed services because AWS tells us to do so.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;false-cause&#34;&gt;False cause&lt;/h2&gt;
&lt;p&gt;Improperly concluding that one thing is a cause of another. Its four
principal kinds are the Post Hoc Fallacy, the Fallacy of Cum Hoc, Ergo
Propter Hoc, the Regression Fallacy, and the Fallacy of Reversing
Causation.&lt;/p&gt;
&lt;h3 id=&#34;post-hoc&#34;&gt;Post hoc&lt;/h3&gt;
&lt;p&gt;Suppose we notice that an event of kind A is followed in time by an
event of kind B, and then hastily leap to the conclusion that A caused
B. If so, our reasoning contains the Post Hoc Fallacy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;After Facebook build their system with PHP, they became hugely successful.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cum-hoc&#34;&gt;Cum hoc&lt;/h3&gt;
&lt;p&gt;Latin for “with this, therefore because of this.” This is a False Cause
Fallacy that doesn’t depend on time order (as does the &lt;a href=&#34;#post-hoc&#34;&gt;Post hoc&lt;/a&gt;
fallacy), but on any other chance correlation of the supposed cause
being in the presence of the supposed effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Google uses lots of microservices and Kubernetes.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reversing-causation&#34;&gt;Reversing causation&lt;/h3&gt;
&lt;p&gt;Drawing an improper conclusion about causation due to a causal
assumption that reverses cause and effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Microsoft and Google both are huge companies and have R&amp;amp;D centers. We
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;need to have a R&amp;amp;D center to become a huge company
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Do pay attention to successful companies, but only when it is valid to
do so. Having a great business model and timing can allow a company to
survive very bad mistakes (such as Google firing all their project
managers once(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Editors 2017&lt;/a&gt;)).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Reims%20Cathedral%20hit%20during%20a%20German%20shell%20barrage.jpg&#34;
         alt=&#34;Figure 1: Reims Cathedral hit during a German shell barrage, 19 September 1914.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Reims Cathedral hit during a German shell barrage, 19 September 1914.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Dowden, Bradley. n.d. “Fallacies.” The Internet Encyclopedia of Philosophy. &lt;a href=&#34;https://web.archive.org/web/20240314002853/https://iep.utm.edu/fallacy/&#34;&gt;https://web.archive.org/web/20240314002853/https://iep.utm.edu/fallacy/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Editors, Re:Work. 2017. “Google’s Ongoing Effort to Make Managers Awesome.” &lt;a href=&#34;https://web.archive.org/web/20230922045752/http://rework.withgoogle.com/blog/Googles-effort-to-make-managers-awesome/&#34;&gt;https://web.archive.org/web/20230922045752/http://rework.withgoogle.com/blog/Googles-effort-to-make-managers-awesome/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Fernando, Jason. 2023. “Faang Stocks: Definition and Companies Involved.” &lt;a href=&#34;https://web.archive.org/web/20240407224456/https://www.investopedia.com/terms/f/faang-stocks.asp&#34;&gt;https://web.archive.org/web/20240407224456/https://www.investopedia.com/terms/f/faang-stocks.asp&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The definitions come from (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Dowden, n.d.&lt;/a&gt;), but the examples
are adapted to this context&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>What is really the matter with the &#39;database&#39;?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/"/>
    <id>https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/</id>
    <published>2024-04-08T00:00:00Z</published>
    <updated>2024-04-08T00:00:00Z</updated>
    <summary>How can we talk straight about a concept when the term that should signify it is equivocated all the time?
I think this is a big part of the problem on discussions about databases. Here are some ways that the term database is widely used in the tech industry:
 A server I&#39;ll access the database in prod. An instance of a DBMS We are running PG 9.3 locally. A design My database will have a user table and a product table.</summary>
    <content type="html">&lt;p&gt;How can we talk straight about a concept when the term that should
signify it is equivocated all the time?&lt;/p&gt;
&lt;p&gt;I think this is a big part of the problem on discussions about
&lt;code&gt;databases&lt;/code&gt;. Here are some ways that the term &lt;code&gt;database&lt;/code&gt; is widely used
in the tech industry:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;A server&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;I&#39;ll access the database in prod.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;An instance of a  DBMS&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;We are running PG 9.3 locally.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A design&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;My database will have a user table and a product table.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A DBMS&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;Let&#39;s use MongoDB as a database!&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A storage strategy&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;I&#39;ll store these as protobufs in my database, it will be faster!&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A group of propositions&lt;/dt&gt;
&lt;dd&gt;(ok, almost no one uses it like this, but
it is what &lt;code&gt;database&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; mean).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Here is a more authoritative source saying the same thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you should be aware that people often use the term database when they
really mean DBMS (in either of the foregoing senses). Here is a typical
example: “Vendor X&amp;rsquo;s database outperformed vendor T s database by a
factor of two to one.” This usage is sloppy, and deprecated, but very,
very common. (The problem is: If we call the DBMS the database, what do
we call the database? Caveat lector!)
(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2003&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can we solve this problem if we don&amp;rsquo;t start by correcting ourselves?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/800px-Cologne_Cathedral_stands_intact_amidst_the_destruction_caused_by_Allied_air_raids,_9_March_1945._CL2169.jpg&#34;
         alt=&#34;Figure 1: Cologne Cathedral stands intact amidst the destruction caused by Allied air raids, 9 March 1945&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Cologne Cathedral stands intact amidst the destruction caused by Allied air raids, 9 March 1945&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, C.J. 2003. &lt;i&gt;An Introduction to Database Systems&lt;/i&gt;. 8th ed. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>The three traditional laws of being</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/"/>
    <id>https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/</id>
    <published>2024-03-24T00:00:00Z</published>
    <updated>2024-03-24T00:00:00Z</updated>
    <summary>The law of identity &amp;lsquo;Whatever is, is.&amp;rsquo; The law of non-contradiction &amp;lsquo;Nothing can both be and not be.&amp;rsquo; The law of excluded middle &amp;lsquo;Everything must either be or not be.&amp;rsquo; (Russell 1912)   Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.
  References .csl-entry{text-indent: -1.5em; margin-left: 1.5em;}Russell, Bertrand.</summary>
    <content type="html">&lt;dl&gt;
&lt;dt&gt;The law of identity&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Whatever is, is.&amp;rsquo;&lt;/dd&gt;
&lt;dt&gt;The law of non-contradiction&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Nothing can both be and not be.&amp;rsquo;&lt;/dd&gt;
&lt;dt&gt;The law of excluded middle&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Everything must either be or not be.&amp;rsquo; (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Russell 1912&lt;/a&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/chartres-rose-window.jpg&#34;
         alt=&#34;Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.&#34; width=&#34;50%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Russell, Bertrand. 1912. &lt;i&gt;The Problems of Philosophy&lt;/i&gt;. Oxford University Press UK.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Who should rule</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/who-should-rule/"/>
    <id>https://ebellani.github.io/blog/2024/who-should-rule/</id>
    <published>2024-03-21T00:00:00Z</published>
    <updated>2024-03-21T00:00:00Z</updated>
    <summary>If you want to become a (better) leader, you should master the four essential characteristics for leaders: integrity, judgment, competence, and vision(Hogan and Kaiser 2005):
 Integrity. A leader must be trusted to be followed. Decisiveness. Making reasonable decisions in a timely manner. Competence. Both your followers and your stakeholders must know that you not only mean well but that you can deliver. Vision. Setting goals under the right strategy is vital for team and company success against its competition.</summary>
    <content type="html">&lt;p&gt;If you want to become a (better) leader, you should master the four
essential characteristics for leaders: integrity, judgment, competence,
and vision(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Hogan and Kaiser 2005&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;. A leader must be trusted to be followed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decisiveness&lt;/strong&gt;. Making reasonable decisions in a timely manner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Competence&lt;/strong&gt;. Both your followers and your stakeholders must know
that you not only mean well but that you can deliver.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vision&lt;/strong&gt;. Setting goals under the right strategy is vital for team
and company success against its competition.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Saint-Sulpice-Nave-Paris.jpg&#34;
         alt=&#34;Figure 1: The nave of the Saint-Sulpice Church in Paris&#34; width=&#34;80%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The nave of the Saint-Sulpice Church in Paris&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Hogan, Robert, and Robert B. Kaiser. 2005. “What We Know About Leadership.” &lt;i&gt;Review of General Psychology&lt;/i&gt; 9 (2): 169–80. &lt;a href=&#34;https://doi.org/10.1037/1089-2680.9.2.169&#34;&gt;https://doi.org/10.1037/1089-2680.9.2.169&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Principles of reliable applications</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/principles-of-reliable-applications/"/>
    <id>https://ebellani.github.io/blog/2024/principles-of-reliable-applications/</id>
    <published>2024-03-19T00:00:00Z</published>
    <updated>2024-03-19T00:00:00Z</updated>
    <summary>The following are adapted from(Perry 2020), using a more database centric approach:
   Principle Implementation     Idempotence Client side ids; Session ids   Immutability Insert only DBMSes (system time in SQL 2016)   Location independence Natural keys   Versioning Additive structures; Temporal dimension on schemas     Figure 1: Gargoyles of Notre-Dame de Paris
  References .csl-entry{text-indent: -1.5em; margin-left: 1.</summary>
    <content type="html">&lt;p&gt;The following are adapted from(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Perry 2020&lt;/a&gt;), using
a more database centric approach:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Principle&lt;/th&gt;
&lt;th&gt;Implementation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Idempotence&lt;/td&gt;
&lt;td&gt;Client side ids; Session ids&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immutability&lt;/td&gt;
&lt;td&gt;Insert only DBMSes (system time in SQL 2016)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location independence&lt;/td&gt;
&lt;td&gt;Natural keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Versioning&lt;/td&gt;
&lt;td&gt;Additive structures; Temporal dimension on schemas&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/notre-dame-gargoyle.jpg&#34;
         alt=&#34;Figure 1: Gargoyles of Notre-Dame de Paris&#34; width=&#34;50%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Gargoyles of Notre-Dame de Paris&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Perry, Michael L. 2020. &lt;i&gt;The art of immutable architecture: Theory and practice of data management in distributed systems&lt;/i&gt;. Paperback. Apress.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Pots, kettles and databases</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/pots-kettles-and-databases/"/>
    <id>https://ebellani.github.io/blog/2024/pots-kettles-and-databases/</id>
    <published>2024-03-17T00:00:00Z</published>
    <updated>2024-03-17T00:00:00Z</updated>
    <summary>Sometimes you stumble upon small insights that illuminate a good chunk of things. Recently I think I have stumbled upon what I believe is a case of that, on the Hibernate manual(King 2024), of all places. The author of the manual itself makes it clear that it is a special section of the manual:
 In this section, we’re going to give you our opinion. If you’re only interested in facts, or if you prefer not to read things that might undermine the opinion you currently hold, please feel free to skip straight to the next chapter.</summary>
    <content type="html">&lt;p&gt;Sometimes you stumble upon small insights that illuminate a good chunk
of things. Recently I think I have stumbled upon what I believe is a
case of that, on the Hibernate manual(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;King 2024&lt;/a&gt;), of
all places. The author of the manual itself makes it clear that it is a
special section of the manual:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this section, we’re going to give you our opinion. If you’re only
interested in facts, or if you prefer not to read things that might
undermine the opinion you currently hold, please feel free to skip
straight to the next chapter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The section can be summarized in the following recommendation and
image(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;King 2024&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;we’re not sure you need a separate persistence layer at all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/hibernate-architecture.png&#34;
         alt=&#34;Figure 1: Hibernate&amp;amp;rsquo;s manual suggested architecture&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Hibernate&amp;rsquo;s manual suggested architecture&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What I found very interesting is that the core of the author&amp;rsquo;s point is
that it was misguided to believe the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eventually, some folks came to believe that their DAOs shielded their
program from depending in a hard way on ORM, allowing them to &amp;ldquo;swap out&amp;rdquo;
Hibernate, and replace it with JDBC, or with something else. In fact,
this was never really true—there’s quite a deep difference between the
programming model of JDBC, where every interaction with the database is
explicit and synchronous, and the programming model of stateful sessions
in Hibernate, where updates are implicit, and SQL statements are
executed asynchronously.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the same argument applies to Hibernate itself! Why call a
transaction/Hibernate layer at all? Why not just call directly the DBMS?
So that you can &lt;strong&gt;swap DBMSes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following is an image that I think summarizes this article:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Charles_Henry_Bennett_-_The_Pot_Calling_The_Kettle_Black_%28coloured_engraving%29_-_%28MeisterDrucke-969630%29.jpg&#34;
         alt=&#34;Figure 2: Charles H. Bennett&amp;amp;rsquo;s coloured engraving from Shadow and Substance (1860), a series based on popular sayings. In this case, a coal-man and chimney sweep stop to argue in the street in illustration of &amp;amp;ldquo;The pot calling the kettle black&amp;amp;rdquo;. A street light throws the shadow of the kitchen implements on the wall behind them.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2: &lt;/span&gt;Charles H. Bennett&amp;rsquo;s coloured engraving from Shadow and Substance (1860), a series based on popular sayings. In this case, a coal-man and chimney sweep stop to argue in the street in illustration of &amp;ldquo;The pot calling the kettle black&amp;rdquo;. A street light throws the shadow of the kitchen implements on the wall behind them.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;King, Gavin. 2024. &lt;i&gt;An Introduction to Hibernate 6&lt;/i&gt;. 6.4. &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/6.4/introduction/html_single/Hibernate_Introduction.html&#34;&gt;https://docs.jboss.org/hibernate/orm/6.4/introduction/html_single/Hibernate_Introduction.html&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>What is database normalization and why should you do it?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/what-is-database-normalization-and-why-should-you-do-it/"/>
    <id>https://ebellani.github.io/blog/2024/what-is-database-normalization-and-why-should-you-do-it/</id>
    <published>2024-02-25T00:00:00Z</published>
    <updated>2024-02-25T00:00:00Z</updated>
    <summary>A fully normalized database means one thing, and only one thing: your relations corresponds only one predicate under a given interpretation (i.e. your business rules).
You should properly normalize your database because it:
  Simplifies integrity enforcement and data manipulation; Avoids data redundancy and the risk of database inconsistency; Guarantees semantic correctness: no update anomalies. (Pascal 2016)   PS: As an example of the impact to the bottom line, think of it means to have to trust, but verify every piece of data you have.</summary>
    <content type="html">&lt;p&gt;A fully normalized database means one thing, and &lt;strong&gt;only&lt;/strong&gt; one thing: your
relations corresponds only one predicate &lt;strong&gt;under a given interpretation
(i.e. your business rules)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You should properly normalize your database because it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Simplifies integrity enforcement and data manipulation;&lt;/li&gt;
&lt;li&gt;Avoids data redundancy and the risk of database inconsistency;&lt;/li&gt;
&lt;li&gt;Guarantees semantic correctness: no update
anomalies. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Pascal 2016&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS: As an example of the impact to the bottom line, think of it means to
have to &lt;code&gt;trust, but verify&lt;/code&gt; every piece of data you have. How many
checks, and in how many places? What if you forget one of those?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/287615-rose-window-strasbourg-cathedral-strasbourg-france.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Pascal, Fabian. 2016. &lt;i&gt;The Dbdebunk Guide to Misconceptions About Data Fundamentals&lt;/i&gt;. DATABASE DEBUNKINGS.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How I do development on PostgreSQL over Emacs</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-do-development-on-postgresql-over-emacs/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-do-development-on-postgresql-over-emacs/</id>
    <published>2024-02-24T00:00:00Z</published>
    <updated>2024-02-24T00:00:00Z</updated>
    <summary>These days I&amp;rsquo;m doing quite a lot of work in PostgreSql. Given that my tool of choice is Emacs, I had to learn how to make do. This post&amp;rsquo;s goal is to document that.
First, I set up a connection
(add-to-list &amp;#39;sql-connection-alist `(production-read-only (sql-product &amp;#39;postgres) (sql-user &amp;#34;prod_user&amp;#34;) (sql-server &amp;#34;data-aurora.cluster-ro.us-east-1.rds.amazonaws.com&amp;#34;) (sql-database &amp;#34;ProdDB&amp;#34;))) Since this uses psql under the covers and I want to not to have to type passwords all the time, I store the passwords in ~/.</summary>
    <content type="html">&lt;p&gt;These days I&amp;rsquo;m doing quite a lot of work in PostgreSql. Given that my
tool of choice is Emacs, I had to learn how to make do. This post&amp;rsquo;s goal
is to document that.&lt;/p&gt;
&lt;p&gt;First, I set up a connection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;sql-connection-alist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;production-read-only&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-product&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;postgres&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-user&lt;/span&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;prod_user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-server&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data-aurora.cluster-ro.us-east-1.rds.amazonaws.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-database&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;ProdDB&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this uses psql under the covers and I want to not to have to type
passwords all the time, I store the passwords in &lt;code&gt;~/.pgpass&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# hostname:port:database:username:password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  data-aurora.cluster-ro.us-east-1.rds.amazonaws.com:5432:ProdDB:prod_user:the_password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make life a bit better over at psql&amp;rsquo;s prompt, I have a
&lt;code&gt;.psqlrc&lt;/code&gt; file with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et QUIET &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et PROMPT1 &lt;span class=&#34;s1&#34;&gt;&amp;#39;(%n@%m) [%/] &amp;gt; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et PROMPT2 &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set null &lt;span class=&#34;s1&#34;&gt;&amp;#39;[null]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et COMP_KEYWORD_CASE upper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et HISTSIZE &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et VERBOSITY verbose
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set linestyle unicode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set border &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set format wrapped
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et QUIET &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I&amp;rsquo;d like to keep the history of commands. Here is how I enable that on comint-mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; This is based on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; The idea is to store sessions of comint based modes. For example, to enable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; reading/writing of command history in, say, inferior-haskell-mode buffers,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; simply add turn-on-comint-history to inferior-haskell-mode-hook by adding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; it to the :hook directive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint-write-history-on-exit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;comint-write-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process-buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer-live-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\nProcess %s %s&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;turn-on-comint-history&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;current-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint-input-ring-file-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.emacs.d/inferior-%s-history&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;comint-read-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set-process-sentinel&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;comint-write-history-on-exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mapc-buffers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer-list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint-write-input-ring-all-buffers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapc-buffers&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;comint-write-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;kill-emacs-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;comint-write-input-ring-all-buffers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;kill-buffer-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;comint-write-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;sql-interactive-mode-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;turn-on-comint-history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sql-password-wallet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.authinfo.gpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Performance and safety</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/performance-and-safety/"/>
    <id>https://ebellani.github.io/blog/2024/performance-and-safety/</id>
    <published>2024-02-20T00:00:00Z</published>
    <updated>2024-02-20T00:00:00Z</updated>
    <summary> The human mind is limited in its capacity to understand complexity. Concurrent software systems are among the most complex of all human creations. Therefore, when you trade safety for performance, you will probably get neither.  </summary>
    <content type="html">&lt;ol&gt;
&lt;li&gt;The human mind is limited in its capacity to understand complexity.&lt;/li&gt;
&lt;li&gt;Concurrent software systems are among the most complex of all human creations.&lt;/li&gt;
&lt;li&gt;Therefore, when you trade safety for performance, you will probably get neither.&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Renaming, not abstraction, is the problem of our industry</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/renaming-not-abstraction/"/>
    <id>https://ebellani.github.io/blog/2024/renaming-not-abstraction/</id>
    <published>2024-01-30T00:00:00Z</published>
    <updated>2024-01-30T00:00:00Z</updated>
    <summary>abstraction (n.) (Latin abs, from trahere, to draw).
 I&amp;rsquo;ve seen people I consider good software engineers complaining that over-abstraction is a (the?) major problem in our industry today. Such points are usually raised when discussing software architecture in particular (one example: (iamprovidence 2023)).
I&amp;rsquo;d like to defend abstraction, and how I don&amp;rsquo;t think it is possible to have over abstraction (in the same sense you cannot be overly good, or overly healthy).</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;abstraction (n.) (Latin abs, from trahere, to draw).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve seen people I consider good software engineers complaining that
over-abstraction is a (the?) major problem in our industry today. Such
points are usually raised when discussing software architecture in
particular (one example: (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;iamprovidence 2023&lt;/a&gt;)).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to defend abstraction, and how I don&amp;rsquo;t think it is possible to
have over abstraction (in the same sense you cannot be overly good, or
overly healthy).&lt;/p&gt;
&lt;p&gt;The definition I&amp;rsquo;d like to use for abstraction is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most eminent Scholastics, however, following Aristotle, ascribe to
the mind in its higher aspect a power (called the Active Intellect)
which abstracts from the representations of concrete things or qualities
the typical, ideal, essential elements, leaving behind those that are
material and particular.  (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Duffy 1907&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As one can see from such definition, the process is to select the
essentials from its concrete manifestation. On software engineering,
that means picking out the right form for your requirements, functional
or otherwise.&lt;/p&gt;
&lt;p&gt;What I think people are complaining about is renaming/rebranding
concepts, which is rife in our industry (see the table on &lt;a href=&#34;/blog/2023/cqrs-nominalism/&#34;&gt;CQRS as
nominalism&lt;/a&gt; for an example).&lt;/p&gt;
&lt;p&gt;What to do then, as a software engineer? Go beyond names, and meditate
on the essences of your craft. What is a function, what is a relation,
what is a number? It will then not matter (to you at least) if someone
calls a function an object, or a relation a table.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Duffy, F. 1907. “Abstraction.” The Catholic Encyclopedia, Vol 11. &lt;a href=&#34;http://www.newadvent.org/cathen/01074a.htm&#34;&gt;http://www.newadvent.org/cathen/01074a.htm&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;iamprovidence. 2023. “Backend Side Architecture Evolution (N-Layered, Ddd, Hexagon, Onion, Clean Architecture).” &lt;a href=&#34;https://web.archive.org/web/20230721054753/https://medium.com/@iamprovidence/backend-side-architecture-evolution-n-layered-ddd-hexagon-onion-clean-architecture-643d72444ce4&#34;&gt;https://web.archive.org/web/20230721054753/https://medium.com/@iamprovidence/backend-side-architecture-evolution-n-layered-ddd-hexagon-onion-clean-architecture-643d72444ce4&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A dangerous book</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/dangerous-book/"/>
    <id>https://ebellani.github.io/blog/2024/dangerous-book/</id>
    <published>2024-01-04T00:00:00Z</published>
    <updated>2024-01-04T00:00:00Z</updated>
    <summary>I recently commented on how the book (Kleppmann 2017) is a dangerous book, due to a subtle error on how it defines data models. I suppose it&amp;rsquo;s my burden to further clarify this point, and for that I&amp;rsquo;ll use Hayek&amp;rsquo;s critical methodological maxim:
 We must first explain how an economy can possibly work right before we can meaningfully ask what might go wrong
 What is a data model? Here are 3 definitions, in increasing level of detail:</summary>
    <content type="html">&lt;p&gt;I recently &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7147881347099926528?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7147881347099926528%2C7148003385328271360%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287148003385328271360%2Curn%3Ali%3Aactivity%3A7147881347099926528%29&#34;&gt;commented&lt;/a&gt; on how the book (&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Kleppmann 2017&lt;/a&gt;)
is a dangerous book, due to a subtle error on how it defines data
models. I suppose it&amp;rsquo;s my burden to further clarify this point, and for
that I&amp;rsquo;ll use Hayek&amp;rsquo;s critical methodological maxim:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We must first explain how an economy can possibly work right before we
can meaningfully ask what might go wrong&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;what-is-a-data-model&#34;&gt;What is a data model?&lt;/h2&gt;
&lt;p&gt;Here are 3 definitions, in increasing level of detail:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A data model is an abstract, self-contained, logical definition of the
objects, operators, and so forth, that together constitute the abstract
machine with which users interact. The objects allow us to model the
structure of data. The operators allow us to model its behavior.
(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Date 2003&lt;/a&gt;):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;a collection of data structure types (the building blocks of any
database that conforms to the model);&lt;/li&gt;
&lt;li&gt;a collection of operators or inferencing rules, which can be applied
to any valid instances of the data types listed in (i), to retrieve
or derive data from any parts of those structures in any combinations
desired;&lt;/li&gt;
&lt;li&gt;a collection of general integrity rules, which implicitly or
explicitly define the set of consistent database states or changes of
state or both &amp;ndash; these rules may sometimes be expressed as
insert-update-delete rules.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Codd 1980&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In particular, the Relational Data Model&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;An open-ended collection of scalar types, including type BOOLEAN in
particular&lt;/li&gt;
&lt;li&gt;A type generator and an intended interpretation for relations of
types generated thereby&lt;/li&gt;
&lt;li&gt;Facilities for defining variables of such generated
relation types&lt;/li&gt;
&lt;li&gt;A assignment operator for assigning values to such variables&lt;/li&gt;
&lt;li&gt;A complete (but otherwise open-ended) collection of generic operators
for deriving values from other values&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Date 2015&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, in our industry, it almost exclusively means a model of
which information is relevant to particular business cases. Those used
to be called Conceptual Schemas. It is part of the classic data model
progression(&lt;a href=&#34;#citeproc_bib_item_6&#34;&gt;Steel 1975&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;Conceptual schema -&amp;gt; Logical schema -&amp;gt; Physical schema &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;What are those? I can&amp;rsquo;t do better than (&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Pascal 2016&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of a conceptual model as the territory, the logical model as its
symbolic representation on the map and the map print and medium (paper,
plastic, screen) as the physical model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How about the Data Model, how does it fit in this metaphor?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The data model is the map legend that provides the mapping symbols and
their correspondence to the elements of the territory (e.g., cities,
highways, forests and so on) they symbolize on the map.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;what-is-wrong-with-the-book-s-definition&#34;&gt;What is wrong with the book&amp;rsquo;s definition?&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Kleppmann 2017&lt;/a&gt;) does not provide an explicit
definition. The closest he has is this paragraph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most applications are built by layering one data model on top of
another. For each layer, the key question is: how is it represented in
terms of the next-lower layer?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My translation of this, given the rest of the book&amp;rsquo;s chapter on Data
Models, is that a Data Model for the author is any particular
implementation of a higher abstraction in a lower abstraction would
count as a Data Model. So, the author refers to all 4 models (and any
concrete instance of them) using the same term.&lt;/p&gt;
&lt;h2 id=&#34;why-does-this-matter&#34;&gt;Why does this matter?&lt;/h2&gt;
&lt;p&gt;I hope that the consequences of such confusion would be clear to the
reader. If not, consider the advice of (&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Pascal 2016&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Referring to all four as data models, or using the terms interchangeably
blurs the important differences, reflecting common confusion of levels
of representation, namely&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conceptual-logical conflation (CLC);&lt;/li&gt;
&lt;li&gt;Logical-physical confusion (LPC).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with costly consequences.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A single example from the book should suffice, I think:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are several driving forces behind the adoption of NoSQL databases,
including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A need for greater scalability than relational databases can easily
achieve, including very large datasets or very high write throughput
&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, the author is confusing a Data Model (the relational data model)
with physical concerns (scalability and throughput), which might lead to
wrong (and very costly) technology and business decisions.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Codd, E. F. 1980. “Data Models in Database Management.” &lt;i&gt;Sigplan Not.&lt;/i&gt; 16 (1): 112–14. &lt;a href=&#34;https://doi.org/10.1145/960124.806891&#34;&gt;https://doi.org/10.1145/960124.806891&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Date, C.J. 2003. &lt;i&gt;An Introduction to Database Systems&lt;/i&gt;. 8th ed. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Date, Chris. 2015. &lt;i&gt;Sql and relational theory: How to write accurate sql code&lt;/i&gt;. Paperback. O’Reilly Media.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Kleppmann, Martin. 2017. &lt;i&gt;Designing data-intensive applications: The big ideas behind reliable, scalable, and maintainable systems&lt;/i&gt;. Paperback. O’Reilly Media.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Pascal, Fabian. 2016. &lt;i&gt;The Dbdebunk Guide to Misconceptions About Data Fundamentals&lt;/i&gt;. DATABASE DEBUNKINGS.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_6&#34;&gt;&lt;/a&gt;Steel, Thomas B. Jr., ed. 1975. “Interim Report: Ansi/X3/Sparc Study Group on Data Base Management Systems 75-02-08.” &lt;i&gt;Bulletin of Acm Sigmod&lt;/i&gt; 7 (2): 1–140. &lt;a href=&#34;http://portal.acm.org/toc.cfm?id=984332&#34;&gt;http://portal.acm.org/toc.cfm?id=984332&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;(schemas are synonymous to models in this context)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Measure, don’t guess.</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2023/measure-dont-guess/"/>
    <id>https://ebellani.github.io/blog/2023/measure-dont-guess/</id>
    <published>2023-12-09T00:00:00Z</published>
    <updated>2023-12-09T00:00:00Z</updated>
    <summary>&amp;hellip; when you trade safety for performance, you may get neither. Especially when it comes to concurrency, the intuition of many developers about where a performance problem lies or which approach will be faster or more scalable is often incorrect.
It is therefore imperative that any performance tuning exercise be accompanied by concrete performance requirements (so you know both when to tune and when to stop tuning) and with a measurement program in place using a realistic configuration and load profile.</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; when you trade safety for performance, you may get
neither. Especially when it comes to concurrency, the intuition of many
developers about where a performance problem lies or which approach will
be faster or more scalable is often incorrect.&lt;/p&gt;
&lt;p&gt;It is therefore imperative that any performance tuning exercise be
accompanied by concrete performance requirements (so you know both when
to tune and when to stop tuning) and with a measurement program in place
using a realistic configuration and load profile.&lt;/p&gt;
&lt;p&gt;Measure again after tuning to verify that you’ve achieved the desired
improvements. The safety and maintenance risks associated with many
optimizations are bad enough—you don’t want to pay these costs if you
don’t need to—and you definitely don’t want to pay them if you don’t
even get the desired benefit. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Goetz 2006&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Goetz, B. 2006. &lt;i&gt;Java Concurrency in Practice&lt;/i&gt;. Addison-Wesley.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Themes of the Elite Private School Curriculum</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2023/theme-elite-schooling/"/>
    <id>https://ebellani.github.io/blog/2023/theme-elite-schooling/</id>
    <published>2023-11-26T00:00:00Z</published>
    <updated>2023-11-26T00:00:00Z</updated>
    <summary>I think its fair to say that one can significantly improve one&amp;rsquo;s chances of being materially successful in life by learning John Taylor Gatto’s 14 Themes of the Elite Private School Curriculum1:
  A theory of human nature (as embodied in history, philosophy, theology, literature and law).
  Skill in the active literacies (writing, public speaking).
  Insight into the major institutional forms (courts, corporations, military, education).</summary>
    <content type="html">&lt;p&gt;I think its fair to say that one can significantly improve one&amp;rsquo;s chances
of being materially successful in life by learning John Taylor Gatto’s
14 Themes of the Elite Private School Curriculum&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A theory of human nature (as embodied in history, philosophy, theology,
literature and law).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Skill in the active literacies (writing, public speaking).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insight into the major institutional forms (courts, corporations, military,
education).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeated exercises in the forms of good manners and politeness; based on
the notion that they are the foundation of all future relationships, all
future alliances, and access to places that you might want to go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Independent work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Energetic physical sports are the only way to confer grace on the human
presence, and that that grace translates into power and money later on. Also,
they teach you practice in handling pain, and in dealing with emergencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A complete theory of access to any place and any person.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Responsibility as an utterly essential part of the curriculum; always to
grab it when it is offered and always to deliver more than is asked for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrival at a personal code of standards (in production, behavior and
morality).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To have a familiarity with, and to be at ease with, the fine
arts. (cultural capital)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The power of accurate observation and recording. For example, sharpen the
perception by being able to draw accurately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ability to deal with challenges of all sorts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A habit of caution in reasoning to conclusions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The constant development and testing of prior judgements: you make
judgements, you discriminate value, and then you follow up and “keep an eye”
on your predictions to see how far skewed, or how consistent, your
predictions were.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;As listed in &lt;a href=&#34;https://www.youtube.com/watch?v=IZBdv2yznmI&#34;&gt;The Ultimate History Lesson&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>CQRS as nominalism</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2023/cqrs-nominalism/"/>
    <id>https://ebellani.github.io/blog/2023/cqrs-nominalism/</id>
    <published>2023-11-04T00:00:00Z</published>
    <updated>2023-11-04T00:00:00Z</updated>
    <summary>A theme that I think is important to understand a lot of modernity and the IT sector in particular, is nominalism.1
So, what is Nominalism, and why does it matter? I&amp;rsquo;ll start with a concrete case and work my way to the abstract definition. The case in point is a somewhat popular architecture tactic, CQRS.
What is CQRS? Here is an authoritative word on it(Young 2010):
 Command and Query Responsibility Segregation (CQRS) originated with Bertrand Meyer’s Command and Query Separation Principle</summary>
    <content type="html">&lt;p&gt;A theme that I think is important to understand a lot of modernity and
the IT sector in particular, is nominalism.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;So, what is Nominalism, and why does it matter? I&amp;rsquo;ll start with a
concrete case and work my way to the abstract definition. The case in
point is a somewhat popular architecture tactic, CQRS.&lt;/p&gt;
&lt;p&gt;What is CQRS? Here is an authoritative word on it(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Young 2010&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Command and Query Responsibility Segregation (CQRS) originated with
Bertrand Meyer’s Command and Query Separation Principle&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;It states that every method should either be a command that performs an
action, or a query that returns data to the caller, but not both. In
other words, asking a question should not change the answer. More
formally, methods should return a value only if they are referentially
transparent and hence possess no side effects.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Basically it boils down to. If you have a return value you cannot mutate
state. If you mutate state your return type must be void.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;in CQRS objects are split into two objects, one containing the Commands
one containing the Queries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CQRS is basically then an extension on CQS, but played on objects
instead of methods. It leverages the notions of immutable and mutable
objects, a feature it shares with a more encompassing approach,
DDD(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Evans 2014&lt;/a&gt;). Here is a mapping of the
terminology. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  CQRS/DDD/Traditional computer science terms mapping
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CQRS&lt;/th&gt;
&lt;th&gt;DDD&lt;/th&gt;
&lt;th&gt;Traditional&lt;/th&gt;
&lt;th&gt;Interpretation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Domain model&lt;/td&gt;
&lt;td&gt;Entity&lt;/td&gt;
&lt;td&gt;Variable&lt;/td&gt;
&lt;td&gt;A symbol that represents a value of a given type. Can represent  different values on different calls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read model&lt;/td&gt;
&lt;td&gt;Value Object&lt;/td&gt;
&lt;td&gt;Value&lt;/td&gt;
&lt;td&gt;An element of a set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;Aggregate command&lt;/td&gt;
&lt;td&gt;assignment operator&lt;/td&gt;
&lt;td&gt;Change the value of a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Query&lt;/td&gt;
&lt;td&gt;Side effect free function&lt;/td&gt;
&lt;td&gt;function call&lt;/td&gt;
&lt;td&gt;Derive values from values&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As this table shows, we have new names for old things, and people think
that because of that they &lt;strong&gt;are&lt;/strong&gt; different things. My point is that this
is because of a nominalist position of the people on the CQRS community,
even if they are unaware of that. Why? Here&amp;rsquo;s what nominalism is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nominalism &amp;hellip; denies the existence of abstract and universal concepts,
and refuses to admit that the intellect has the power of engendering
them. What are called general ideas are only names, mere verbal
designations, serving as labels for a collection of things or a series
of particular events. (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;De Wulf 1911&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you don&amp;rsquo;t believe that general ideas exist as such, you have a
strong (inevitable?) tendency to mistake names for things, like the
CQRS community did here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS&lt;/em&gt;: Any implementation patterns that apply to CQRS would also apply to
the tradional concepts, since my point here is to show that &lt;strong&gt;they are
the same thing&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, C.J. 2003. &lt;i&gt;An Introduction to Database Systems&lt;/i&gt;. 8th ed. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;De Wulf, Maurice. 1911. “Nominalism, Realism, Conceptualism.” The Catholic Encyclopedia, Vol 11. &lt;a href=&#34;https://www.newadvent.org/cathen/11090c.htm&#34;&gt;https://www.newadvent.org/cathen/11090c.htm&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Evans, Eric. 2014. &lt;i&gt;Domain-driven design reference: Definitions and pattern summaries&lt;/i&gt;. Paperback. Dog Ear Pub Llc.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Young, Greg. 2010. “Cqrs Documents by Greg Young.” &lt;a href=&#34;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&#34;&gt;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;You will probably see me return to this topic in other posts.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;I got the idea of such table from a similar table found on
chapter 25 of  (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2003&lt;/a&gt;)&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to stand out in your career, the shortest version I know</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2023/stand-out-short/"/>
    <id>https://ebellani.github.io/blog/2023/stand-out-short/</id>
    <published>2023-09-18T00:00:00Z</published>
    <updated>2023-09-18T00:00:00Z</updated>
    <summary>Someone asked me about this, so I feel it might help people out there.
The short, no nonsense advise I give to people on standing out as a programmer:
 Generate results Make your boss look good Join a relevant open source project  </summary>
    <content type="html">&lt;p&gt;Someone asked me about this, so I feel it might help people out there.&lt;/p&gt;
&lt;p&gt;The short, no nonsense advise I give to people on standing out as a
programmer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate results&lt;/li&gt;
&lt;li&gt;Make your boss look good&lt;/li&gt;
&lt;li&gt;Join a relevant open source project&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
</feed>
