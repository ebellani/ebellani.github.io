<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eduardo&#39;s blog</title>
  <link href="https://ebellani.github.io/blog/"/>
  
    <link href="https://ebellani.github.io/blog/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>2024-06-07T02:51:52Z</updated>
  <author>
    <name>Eduardo Bellani</name>
    
  </author>
  <generator>Hugo</generator>
  <id>https://ebellani.github.io/blog/</id>
  
  <entry>
    <title>Why updateable views, or, Why modules matter?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/why-updateable-views-or-why-modules-matter/"/>
    <id>https://ebellani.github.io/blog/2024/why-updateable-views-or-why-modules-matter/</id>
    <published>2024-06-06T00:00:00Z</published>
    <updated>2024-06-06T00:00:00Z</updated>
    <summary>Continuing a rich conversation that sparked other posts, I was asked to justify updateable views which, to me, are analogous to module&#39; signatures (a topic for another post). Here&amp;rsquo;s the full exchange.
  Why is the logical model more likely to be correct and immutable from the perspective of the app than the physical one?   This question seems to mistake logical and physical independence.
 Logical independence the ability to change the form without affecting clients.</summary>
    <content type="html">&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7203831867937091584?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7203831867937091584%2C7203924209067008000%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7203831867937091584%2C7204472979404005376%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287203924209067008000%2Curn%3Ali%3Aactivity%3A7203831867937091584%29&amp;amp;dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287204472979404005376%2Curn%3Ali%3Aactivity%3A7203831867937091584%29&#34;&gt;Continuing&lt;/a&gt; a rich conversation that sparked &lt;a href=&#34;/blog/2024/a-real-life-example-of-database-design/&#34;&gt;other&lt;/a&gt; &lt;a href=&#34;/blog/2024/how-to-use-the-relational-model-to-do-database-design/&#34;&gt;posts&lt;/a&gt;, I was asked to
justify updateable views which, to me, are analogous to module&#39;
signatures (a topic for another post). Here&amp;rsquo;s the full exchange.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Why is the logical model more likely to be correct and immutable from
the perspective of the app than the physical one?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This question seems to mistake logical and physical independence.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Logical independence&lt;/dt&gt;
&lt;dd&gt;the ability to change the form without
affecting clients.&lt;/dd&gt;
&lt;dt&gt;Physical independence&lt;/dt&gt;
&lt;dd&gt;the ability to change the implementation
without changing the form.&lt;/dd&gt;
&lt;/dl&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In an updateable view world, how would you explain deadlocks
occurring to the developers consuming the model (since they can no
longer &amp;ldquo;see&amp;rdquo; the physical tables that implement it)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, how will you explain the performance characteristics of
that model when someone updates the updatable view (example: updating
a column that is a primary key is MUCH cheaper then one that is a
foreign key - yet they look the same in the logical representation
shows to the developer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the same line of reasoning: How do you explain to developers why
there is a vastly different performance characteristics selecting
data from the same view even though queries look almost identical?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;All these seem to boil down to: how do you explain performance and
concurrency issues to the clients of the view? I&amp;rsquo;ll make an analogy with
RPC endpoints, which are the most widely used alternative to updateable
views. Such endpoints use documentation to explain their capabilities
limitations to their clients.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Which skill is more common and cheapest to acquire: A database
developer who can create such a logical model or the developer who
can modify apps in case we got something about the model wrong?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The logical model will be created, and SQL is a better language for
that, since it at least can be declarative. In that sense, I think SQL
is cheaper because it provides a better language than the ones mostly
used. But the real advantages are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoidable rework. The logical contract is done once. In RPC
alternatives such contract can be implemented in multiple apps.&lt;/li&gt;
&lt;li&gt;Consistency. Having the DBMS be the source of truth instead of
multiple DBMS instances avoids consistency problems, which are widely
considered the most expensive problems in the industry.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/st-maria-civil-war--comparision.jpg&#34;
         alt=&#34;Figure 1: Santa Maria del Mar destroyed by communist arson, circa 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Santa Maria del Mar destroyed by communist arson, circa 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A real life example of database design</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/"/>
    <id>https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/</id>
    <published>2024-05-27T00:00:00Z</published>
    <updated>2024-05-27T00:00:00Z</updated>
    <summary>In a followup to How to use the relational model to do database design?, I was asked to provide an example to illustrate the point:
 Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car (it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD and also let say we allow truck types of cars with 6 wheels. Cars have various engine types and depending on the model of car, some colours are available and some are not.</summary>
    <content type="html">&lt;p&gt;In a followup to &lt;a href=&#34;/blog/2024/how-to-use-the-relational-model-to-do-database-design/&#34;&gt;How to use the relational model to do database design?&lt;/a&gt;,
I was asked to provide an example to illustrate the point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car
(it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD
and also let say we allow truck types of cars with 6 wheels. Cars have
various engine types and depending on the model of car, some colours are
available and some are not. How would you apply the logical design to
this idea and where would such a design lead you if you were to
implement it into the physical world?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a list of predicates that provide such an example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists car of models &lt;code&gt;$MOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have transmission &lt;code&gt;$TRA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have engines &lt;code&gt;$ENG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cars can have colors &lt;code&gt;$COL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have color &lt;code&gt;$COL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have engine &lt;code&gt;$ENG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Model &lt;code&gt;$MOD&lt;/code&gt; can have transmission &lt;code&gt;$TRA&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/burning-cathedral-spanish-civil-war.jpg&#34;
         alt=&#34;Figure 1: Spanish cathedral destroyed by communist arson, circa 1937&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Spanish cathedral destroyed by communist arson, circa 1937&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to use the relational model to do database design?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-use-the-relational-model-to-do-database-design/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-use-the-relational-model-to-do-database-design/</id>
    <published>2024-05-26T00:00:00Z</published>
    <updated>2024-05-26T00:00:00Z</updated>
    <summary>On a recent exchange I was asked the following:
 &amp;hellip; what you mean that you use the relation model to design? &amp;hellip;
 Let&amp;rsquo;s first start with the motivation: Why should one use the relational model(RM) to do database design? Here is my one line answer:
It makes it possible to have and to maintain the integrity of your business rules.
To illustrate this point, here are some examples of problems that one faces when one does not have such integrity:</summary>
    <content type="html">&lt;p&gt;On a recent &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7199813569549328386?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7199813569549328386%2C7199820740962004992%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7199813569549328386%2C7200430915628462080%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287199820740962004992%2Curn%3Ali%3Aactivity%3A7199813569549328386%29&amp;amp;dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287200430915628462080%2Curn%3Ali%3Aactivity%3A7199813569549328386%29%20&#34;&gt;exchange&lt;/a&gt; I was asked the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; what you mean that you use the relation model to design? &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s first start with the motivation: &lt;strong&gt;Why&lt;/strong&gt; should one use the
relational model(RM) to do database design? Here is my one line answer:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It makes it possible to have and to maintain the integrity of your
business rules.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To illustrate this point, here are some examples of problems that one
faces when one does not have such integrity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A status got written to &amp;lsquo;Done&amp;rsquo;, but the data that was expected to be
there was not (eventual consistency)&lt;/li&gt;
&lt;li&gt;Some data that your application depends on got deleted (delete anomaly)&lt;/li&gt;
&lt;li&gt;A join returns more information than expected (update anomaly)&lt;/li&gt;
&lt;li&gt;Slow queries (optimizer problems due to duplicates)
&lt;ul&gt;
&lt;li&gt;Ambiguous duplicates in results (duplicates)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrong query results (NULLs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to the point at hand: How would one use the relational model to
design a database? Let me start by a definition of what is the
relational model:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;An open-ended collection of scalar types, including type BOOLEAN in
particular&lt;/li&gt;
&lt;li&gt;A type generator and an intended interpretation for relations of
types generated thereby&lt;/li&gt;
&lt;li&gt;Facilities for defining variables of such generated
relation types&lt;/li&gt;
&lt;li&gt;A assignment operator for assigning values to such variables&lt;/li&gt;
&lt;li&gt;A complete (but otherwise open-ended) collection of generic operators
for deriving values from other values&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2015&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s define a database:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A database is a set of predicates and instatiations of such as
propositions.&lt;/em&gt; The RM uses relation types to represent predicates. SQL
uses table definitions. The RM uses relations to represent the arguments
of a predicate, SQL uses rows.&lt;/p&gt;
&lt;p&gt;In short, the RM set global constraints on any database design. Here is
a (probably incomplete) list with ways that the RM drives database
design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never allow NULL anywhere (avoid &lt;code&gt;NULL&lt;/code&gt; generating operators, such as &lt;code&gt;OUTER JOIN&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Never allow duplicates (avoid duplicates generating queries, such as &lt;code&gt;&amp;lt;SELECT | UNION&amp;gt; All&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Never depend on position of columns or rows&lt;/li&gt;
&lt;li&gt;Always make sure each table represents one and only one predicate, thus being in 5NF&lt;/li&gt;
&lt;li&gt;Use updateable views to have logical independence (simulate them with triggers)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/SpanishLeftistsShootStatueOfChrist.jpg&#34;
         alt=&#34;Figure 1: Communist firing squad aiming at the Monument of the Sacred Heart on the Cerro de los Angeles, Spain. 31 August 1936&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Communist firing squad aiming at the Monument of the Sacred Heart on the Cerro de los Angeles, Spain. 31 August 1936&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, Chris. 2015. &lt;i&gt;Sql and relational theory: How to write accurate sql code&lt;/i&gt;. Paperback. O’Reilly Media.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How to (not) lock yourself into architectural drawbacks, or, Microservice architecture as the reification of Pi-Calculus</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/microservices-as-reification/"/>
    <id>https://ebellani.github.io/blog/2024/microservices-as-reification/</id>
    <published>2024-05-04T00:00:00Z</published>
    <updated>2024-05-04T00:00:00Z</updated>
    <summary>Reification: the treatment of something abstract as a material or concrete thing, as in the following lines from Matthew Arnold’s poem “Dover Beach”: (Britannica 2018)
/The Sea of Faith
Was once, too, at the full, and round earth’s shore
Lay like the folds of a bright girdle furled./
  The microservice architecture(MA) has taken a deep hold in the collective imagination of the software engineering community since at least 20141.</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Reification&lt;/em&gt;: the treatment of something abstract as a material or
concrete thing, as in the following lines from Matthew Arnold’s poem
“Dover Beach”: (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Britannica 2018&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;verse&#34;&gt;
&lt;p&gt;/The Sea of Faith&lt;br /&gt;
Was once, too, at the full, and round earth’s shore&lt;br /&gt;
Lay like the folds of a bright girdle furled./&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The microservice architecture(MA) has taken a deep hold in the
collective imagination of the software engineering community since at
least 2014&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This has happened despite serious and well documented
&lt;a href=&#34;#drawbacks&#34;&gt;drawbacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Such combination calls for an explanation. A sketch of such explanation
is my intent here, starting with what MA is, at bottom. At a later date
I intend to provide a history of how it came to be a dominant
architecture on our industry.&lt;/p&gt;
&lt;p&gt;My position is that MA is a reification(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Britannica 2018&lt;/a&gt;)
of abstract processes as defined by the Pi-Calculus (PC). Why do I think
of that? Let&amp;rsquo;s start by defining things.&lt;/p&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;PC is a model of message-based concurrent computation and its essential
features are(&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;Pierce 1997&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;focusing on interaction via communication rather than shared
variables,&lt;/li&gt;
&lt;li&gt;describing concurrent systems using a small set of primitive operators
and&lt;/li&gt;
&lt;li&gt;on deriving useful algebraic laws for manipulating expressions written
using these operators.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;More concretely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;
&lt;br /&gt;
π-calculus lets you represent processes, parallel composition of
processes, synchronous communication between processes through channels,
creation of fresh channels, replication of processes, and nondeterminism
&lt;br /&gt;
&amp;hellip;
&lt;br /&gt;
A &lt;strong&gt;process&lt;/strong&gt; is an abstraction of an independent thread of control. A
&lt;strong&gt;channel&lt;/strong&gt; is an abstraction of the communication link between two
processes. Processes interact with each other by sending and receiving
&lt;strong&gt;messages&lt;/strong&gt; over channels.
(&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;Wing 2002&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the best definition of the MA that I know of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The microservice architecture pattern structures the system as a
collection of independently deployable services that communicate only
via messages through service interfaces. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Bass et al. 2021&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;how-are-they-mapped&#34;&gt;How are they mapped?&lt;/h2&gt;
&lt;p&gt;So here is PC is mapped to MA:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Processes&lt;/strong&gt; are Services(binaries loaded into memory),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Channels&lt;/strong&gt; are either queues or some form of APIs (RPC or REST),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; are network calls,&lt;/li&gt;
&lt;li&gt;The avoidance of &lt;strong&gt;shared variables&lt;/strong&gt; as an avoidance of a shared DBMS.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The reader might well ask, so what? Isn&amp;rsquo;t that a good thing? Well, no,
it&amp;rsquo;s a very bad thing. Why?&lt;/p&gt;
&lt;p&gt;Because once you mistake a formal entity such as the PC with a material
one such as the MA, you lock yourself out of possibilities and in
specific &lt;a href=&#34;#drawbacks&#34;&gt;drawbacks&lt;/a&gt; that might not exist in other ways to implement the
PC.&lt;/p&gt;
&lt;p&gt;Let me illustrate the point here with a metaphor:&lt;/p&gt;
&lt;p&gt;Say you think the formal entity called &lt;code&gt;Boat&lt;/code&gt; can only be implemented by
&lt;code&gt;Yacht&lt;/code&gt;. You now are locked into the design choices of that concrete
instantiation of the &lt;code&gt;Boat&lt;/code&gt; form. &lt;code&gt;Transatlantic&lt;/code&gt; or &lt;code&gt;Canoe&lt;/code&gt; are not
possible for you.&lt;/p&gt;
&lt;p&gt;Coming back to the case at hand, here are some examples of how you could
implement the pi-calculus without MA:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a language/runtime that supports it, such as Erlang/ERT, SML/NJ or F#/.net.&lt;/li&gt;
&lt;li&gt;Use a framework such as Akka.&lt;/li&gt;
&lt;li&gt;Use a DBMS where several applications share the same DBMS but you use
permissions and views to manage access and have logical independence.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;drawbacks&#34;&gt;Appendix: The Drawbacks&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It hurts performance. The overhead of serializing data and sending it
across the network is increasingly becoming a bottleneck. When
developers over-split their applications, these overheads compound.&lt;/li&gt;
&lt;li&gt;It hurts correctness. It is extremely challenging to reason about the
interactions between every deployed version of every microservice. In
a case study of over 100 catastrophic failures of eight widely used
systems, two-thirds of failures were caused by the interactions
between multiple versions of a system.&lt;/li&gt;
&lt;li&gt;It is hard to manage. Rather than having a single binary to build,
test, and deploy, developers have to manage 𝑛 different binaries, each
on their own release schedule. Running end-to-end tests with a local
instance of the application becomes an engineering feat.&lt;/li&gt;
&lt;li&gt;It freezes APIs. Once a microservice establishes an API, it becomes
hard to change without breaking the other services that consume the
API. Legacy APIs linger around, and new APIs are patched on top.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;It slows down application development. When making changes that affect
multiple microservices, developers cannot implement and deploy the
changes atomically. They have to carefully plan how to introduce the
change across 𝑛 microservices with their own release schedules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;Ghemawat et al. 2023&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Cath%c3%a9drale_St_Joseph_de_Phnom_Penh.jpg&#34;
         alt=&#34;Figure 1: Cathedral of Phnom Penhl, destroyed shortly after by the Khmer Rouge. The Ministry of Posts and Telecommunications now stands on the site of the former cathedral&#34; width=&#34;30%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Cathedral of Phnom Penhl, destroyed shortly after by the Khmer Rouge. The Ministry of Posts and Telecommunications now stands on the site of the former cathedral&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Bass, L., P. Clements, R. Kazman, and an O’Reilly Media Company Safari. 2021. &lt;i&gt;Software Architecture in Practice, 4th Edition&lt;/i&gt;. Sei Series in Software Engineering. Addison-Wesley Professional.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Britannica, The Editors of Encyclopaedia. 2018. “Reification.” In &lt;i&gt;Encyclopedia Britannica&lt;/i&gt;. &lt;a href=&#34;https://www.britannica.com/topic/reification&#34;&gt;https://www.britannica.com/topic/reification&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;Ghemawat, Sanjay, Robert Grandl, Srdjan Petrovic, Michael Whittaker, Parveen Patel, Ivan Posva, and Amin Vahdat. 2023. “Towards Modern Development of Cloud Applications.” In &lt;i&gt;Proceedings of the 19th Workshop on Hot Topics in Operating Systems&lt;/i&gt;, 110–17. Hotos ’23. Providence, RI, USA: Association for Computing Machinery. &lt;a href=&#34;https://doi.org/10.1145/3593856.3595909&#34;&gt;https://doi.org/10.1145/3593856.3595909&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;Pierce, Benjamin C. 1997. “Foundational Calculi for Programming Languages.” In &lt;i&gt;The Computer Science and Engineering Handbook&lt;/i&gt;, edited by Allen B. Tucker, 2190–2207. CRC Press. &lt;a href=&#34;http://dblp.uni-trier.de/db/books/collections/tucker97.html#Pierce97&#34;&gt;http://dblp.uni-trier.de/db/books/collections/tucker97.html#Pierce97&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;Wing, Jeannette M. 2002. “Faq on $\Pi$-Calculus.” &lt;a href=&#34;https://www.cs.cmu.edu/~wing/publications/Wing02a.pdf&#34;&gt;https://www.cs.cmu.edu/~wing/publications/Wing02a.pdf&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://trends.google.com/trends/explore?date=all&amp;amp;geo=US&amp;amp;q=microservices&#34;&gt;https://trends.google.com/trends/explore?date=all&amp;amp;geo=US&amp;amp;q=microservices&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;In a certain sense, all externally facing APIs face this. Microservices just make this problem worse by making everything &lt;code&gt;external&lt;/code&gt; and not part of the same checkable runtime.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A practical principle on politics (office or otherwise)</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-practical-principle-on-politics--office-or-otherwise/"/>
    <id>https://ebellani.github.io/blog/2024/a-practical-principle-on-politics--office-or-otherwise/</id>
    <published>2024-04-28T00:00:00Z</published>
    <updated>2024-04-28T00:00:00Z</updated>
    <summary>If you are involved in politics, as a voter or just as an office worker in an unfortunate situation, you would do well to remember this dictum:
 When a public figure tells you something that you want to hear, question his sincerity. When a public figure tells you something you don’t want to hear, believe him.(Lawler 2024)
  Figure 1: The destruction of the original Church of Christ the Saviour in Moscow, Russia</summary>
    <content type="html">&lt;p&gt;If you are involved in politics, as a voter or just as an office worker
in an unfortunate situation, you would do well to remember this dictum:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a public figure tells you something that you want to hear, question
his sincerity. When a public figure tells you something you don’t want
to hear, believe him.(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Lawler 2024&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Christ_saviour_explosion.jpg&#34;
         alt=&#34;Figure 1: The destruction of the original Church of Christ the Saviour in Moscow, Russia&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The destruction of the original Church of Christ the Saviour in Moscow, Russia&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Lawler, Phil. 2024. “What Is Truth? a Journalist Asks Pilate’s Question.” &lt;a href=&#34;https://www.catholicculture.org/commentary/what-is-truth-journalist-asks-pilates-question/&#34;&gt;https://www.catholicculture.org/commentary/what-is-truth-journalist-asks-pilates-question/&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>A point about FAANG points</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/a-point-about-faang/"/>
    <id>https://ebellani.github.io/blog/2024/a-point-about-faang/</id>
    <published>2024-04-14T00:00:00Z</published>
    <updated>2024-04-14T00:00:00Z</updated>
    <summary>As a technologist I often hear variations of the following phrase in my industry:
 Do it because some FAANG(Fernando 2023) company did it.
 The structure of this argument is usually like this:
 Technique or process X is great/bad, Company C does it like this, C is financially successful and famous, Therefore, you should do the same X as C does.  This is a mixture of the fallacies of selection bias, appeal to authority and false cause.</summary>
    <content type="html">&lt;p&gt;As a technologist I often hear variations of the following phrase in my
industry:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do it because some FAANG(&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;Fernando 2023&lt;/a&gt;) company did it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The structure of this argument is usually like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Technique or process X is great/bad,&lt;/li&gt;
&lt;li&gt;Company C does it like this,&lt;/li&gt;
&lt;li&gt;C is financially successful and famous,&lt;/li&gt;
&lt;li&gt;Therefore, you should do the same X as C does.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a mixture of the fallacies of selection bias, appeal to
authority and false cause. Here are their definitions and some
context-sensitive examples&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;h2 id=&#34;selection-bias&#34;&gt;Selection bias&lt;/h2&gt;
&lt;p&gt;This is a bias introduced by sampling in a way that is not
representative of the population in question.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We should only look at what FAANG companies do (and ignore the ones that
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;did the same and went bankrupt).
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appeal-to-authority&#34;&gt;Appeal to authority&lt;/h2&gt;
&lt;p&gt;You appeal to authority if you back up your reasoning by saying that it
is supported by what some authority says on the subject.&lt;/p&gt;
&lt;p&gt;However, appealing to authority as a reason to believe something is
fallacious whenever the authority appealed to is not really an authority
in this particular subject, when the authority cannot be trusted to tell
the truth, when authorities disagree on this subject (except for the
occasional lone wolf), when the reasoner misquotes the authority, and so
forth.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We should start using managed services because AWS tells us to do so.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;false-cause&#34;&gt;False cause&lt;/h2&gt;
&lt;p&gt;Improperly concluding that one thing is a cause of another. Its four
principal kinds are the Post Hoc Fallacy, the Fallacy of Cum Hoc, Ergo
Propter Hoc, the Regression Fallacy, and the Fallacy of Reversing
Causation.&lt;/p&gt;
&lt;h3 id=&#34;post-hoc&#34;&gt;Post hoc&lt;/h3&gt;
&lt;p&gt;Suppose we notice that an event of kind A is followed in time by an
event of kind B, and then hastily leap to the conclusion that A caused
B. If so, our reasoning contains the Post Hoc Fallacy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;After Facebook build their system with PHP, they became hugely successful.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cum-hoc&#34;&gt;Cum hoc&lt;/h3&gt;
&lt;p&gt;Latin for “with this, therefore because of this.” This is a False Cause
Fallacy that doesn’t depend on time order (as does the &lt;a href=&#34;#post-hoc&#34;&gt;Post hoc&lt;/a&gt;
fallacy), but on any other chance correlation of the supposed cause
being in the presence of the supposed effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Google uses lots of microservices and Kubernetes.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reversing-causation&#34;&gt;Reversing causation&lt;/h3&gt;
&lt;p&gt;Drawing an improper conclusion about causation due to a causal
assumption that reverses cause and effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Microsoft and Google both are huge companies and have R&amp;amp;D centers. We
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;need to have a R&amp;amp;D center to become a huge company
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Do pay attention to successful companies, but only when it is valid to
do so. Having a great business model and timing can allow a company to
survive very bad mistakes (such as Google firing all their project
managers once(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Editors 2017&lt;/a&gt;)).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Reims%20Cathedral%20hit%20during%20a%20German%20shell%20barrage.jpg&#34;
         alt=&#34;Figure 1: Reims Cathedral hit during a German shell barrage, 19 September 1914.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Reims Cathedral hit during a German shell barrage, 19 September 1914.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Editors, Re:Work. 2017. “Google’s Ongoing Effort to Make Managers Awesome.” &lt;a href=&#34;https://web.archive.org/web/20230922045752/http://rework.withgoogle.com/blog/Googles-effort-to-make-managers-awesome/&#34;&gt;https://web.archive.org/web/20230922045752/http://rework.withgoogle.com/blog/Googles-effort-to-make-managers-awesome/&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;Fernando, Jason. 2023. “Faang Stocks: Definition and Companies Involved.” &lt;a href=&#34;https://web.archive.org/web/20240407224456/https://www.investopedia.com/terms/f/faang-stocks.asp&#34;&gt;https://web.archive.org/web/20240407224456/https://www.investopedia.com/terms/f/faang-stocks.asp&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;(schemas are synonymous to models in this context)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>What is really the matter with the &#39;database&#39;?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/"/>
    <id>https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/</id>
    <published>2024-04-08T00:00:00Z</published>
    <updated>2024-04-08T00:00:00Z</updated>
    <summary>How can we talk straight about a concept when the term that should signify it is equivocated all the time?
I think this is a big part of the problem on discussions about databases. Here are some ways that the term database is widely used in the tech industry:
 A server I&#39;ll access the database in prod. An instance of a DBMS We are running PG 9.3 locally. A design My database will have a user table and a product table.</summary>
    <content type="html">&lt;p&gt;How can we talk straight about a concept when the term that should
signify it is equivocated all the time?&lt;/p&gt;
&lt;p&gt;I think this is a big part of the problem on discussions about
&lt;code&gt;databases&lt;/code&gt;. Here are some ways that the term &lt;code&gt;database&lt;/code&gt; is widely used
in the tech industry:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;A server&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;I&#39;ll access the database in prod.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;An instance of a  DBMS&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;We are running PG 9.3 locally.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A design&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;My database will have a user table and a product table.&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A DBMS&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;Let&#39;s use MongoDB as a database!&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A storage strategy&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;I&#39;ll store these as protobufs in my database, it will be faster!&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;A group of propositions&lt;/dt&gt;
&lt;dd&gt;(ok, almost no one uses it like this, but
it is what &lt;code&gt;database&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; mean).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Here is a more authoritative source saying the same thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you should be aware that people often use the term database when they
really mean DBMS (in either of the foregoing senses). Here is a typical
example: “Vendor X&amp;rsquo;s database outperformed vendor T s database by a
factor of two to one.” This usage is sloppy, and deprecated, but very,
very common. (The problem is: If we call the DBMS the database, what do
we call the database? Caveat lector!)
(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Date 2003&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can we solve this problem if we don&amp;rsquo;t start by correcting ourselves?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/800px-Cologne_Cathedral_stands_intact_amidst_the_destruction_caused_by_Allied_air_raids,_9_March_1945._CL2169.jpg&#34;
         alt=&#34;Figure 1: Cologne Cathedral stands intact amidst the destruction caused by Allied air raids, 9 March 1945&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Cologne Cathedral stands intact amidst the destruction caused by Allied air raids, 9 March 1945&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Date, C.J. 2003. &lt;i&gt;An Introduction to Database Systems&lt;/i&gt;. 8th ed. USA: Addison-Wesley Longman Publishing Co., Inc.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>The three traditional laws of being</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/"/>
    <id>https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/</id>
    <published>2024-03-24T00:00:00Z</published>
    <updated>2024-03-24T00:00:00Z</updated>
    <summary>The law of identity &amp;lsquo;Whatever is, is.&amp;rsquo; The law of non-contradiction &amp;lsquo;Nothing can both be and not be.&amp;rsquo; The law of excluded middle &amp;lsquo;Everything must either be or not be.&amp;rsquo; (Russell 1912)   Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.
  References .csl-entry{text-indent: -1.5em; margin-left: 1.5em;}Russell, Bertrand.</summary>
    <content type="html">&lt;dl&gt;
&lt;dt&gt;The law of identity&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Whatever is, is.&amp;rsquo;&lt;/dd&gt;
&lt;dt&gt;The law of non-contradiction&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Nothing can both be and not be.&amp;rsquo;&lt;/dd&gt;
&lt;dt&gt;The law of excluded middle&lt;/dt&gt;
&lt;dd&gt;&amp;lsquo;Everything must either be or not be.&amp;rsquo; (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Russell 1912&lt;/a&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/chartres-rose-window.jpg&#34;
         alt=&#34;Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.&#34; width=&#34;50%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Russell, Bertrand. 1912. &lt;i&gt;The Problems of Philosophy&lt;/i&gt;. Oxford University Press UK.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Who should rule</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/who-should-rule/"/>
    <id>https://ebellani.github.io/blog/2024/who-should-rule/</id>
    <published>2024-03-21T00:00:00Z</published>
    <updated>2024-03-21T00:00:00Z</updated>
    <summary>If you want to become a (better) leader, you should master the four essential characteristics for leaders: integrity, judgment, competence, and vision(Hogan and Kaiser 2005):
 Integrity. A leader must be trusted to be followed. Decisiveness. Making reasonable decisions in a timely manner. Competence. Both your followers and your stakeholders must know that you not only mean well but that you can deliver. Vision. Setting goals under the right strategy is vital for team and company success against its competition.</summary>
    <content type="html">&lt;p&gt;If you want to become a (better) leader, you should master the four
essential characteristics for leaders: integrity, judgment, competence,
and vision(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Hogan and Kaiser 2005&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;. A leader must be trusted to be followed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decisiveness&lt;/strong&gt;. Making reasonable decisions in a timely manner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Competence&lt;/strong&gt;. Both your followers and your stakeholders must know
that you not only mean well but that you can deliver.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vision&lt;/strong&gt;. Setting goals under the right strategy is vital for team
and company success against its competition.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Saint-Sulpice-Nave-Paris.jpg&#34;
         alt=&#34;Figure 1: The nave of the Saint-Sulpice Church in Paris&#34; width=&#34;80%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;The nave of the Saint-Sulpice Church in Paris&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Hogan, Robert, and Robert B. Kaiser. 2005. “What We Know About Leadership.” &lt;i&gt;Review of General Psychology&lt;/i&gt; 9 (2): 169–80. &lt;a href=&#34;https://doi.org/10.1037/1089-2680.9.2.169&#34;&gt;https://doi.org/10.1037/1089-2680.9.2.169&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Principles of reliable applications</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/principles-of-reliable-applications/"/>
    <id>https://ebellani.github.io/blog/2024/principles-of-reliable-applications/</id>
    <published>2024-03-19T00:00:00Z</published>
    <updated>2024-03-19T00:00:00Z</updated>
    <summary>The following are adapted from(Perry 2020), using a more database centric approach:
   Principle Implementation     Idempotence Client side ids; Session ids   Immutability Insert only DBMSes (system time in SQL 2016)   Location independence Natural keys   Versioning Additive structures; Temporal dimension on schemas     Figure 1: Gargoyles of Notre-Dame de Paris
  References .csl-entry{text-indent: -1.5em; margin-left: 1.</summary>
    <content type="html">&lt;p&gt;The following are adapted from(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Perry 2020&lt;/a&gt;), using
a more database centric approach:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Principle&lt;/th&gt;
&lt;th&gt;Implementation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Idempotence&lt;/td&gt;
&lt;td&gt;Client side ids; Session ids&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immutability&lt;/td&gt;
&lt;td&gt;Insert only DBMSes (system time in SQL 2016)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location independence&lt;/td&gt;
&lt;td&gt;Natural keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Versioning&lt;/td&gt;
&lt;td&gt;Additive structures; Temporal dimension on schemas&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/notre-dame-gargoyle.jpg&#34;
         alt=&#34;Figure 1: Gargoyles of Notre-Dame de Paris&#34; width=&#34;50%&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Gargoyles of Notre-Dame de Paris&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Perry, Michael L. 2020. &lt;i&gt;The art of immutable architecture: Theory and practice of data management in distributed systems&lt;/i&gt;. Paperback. Apress.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Pots, kettles and databases</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/pots-kettles-and-databases/"/>
    <id>https://ebellani.github.io/blog/2024/pots-kettles-and-databases/</id>
    <published>2024-03-17T00:00:00Z</published>
    <updated>2024-03-17T00:00:00Z</updated>
    <summary>Sometimes you stumble upon small insights that illuminate a good chunk of things. Recently I think I have stumbled upon what I believe is a case of that, on the Hibernate manual(King 2024), of all places. The author of the manual itself makes it clear that it is a special section of the manual:
 In this section, we’re going to give you our opinion. If you’re only interested in facts, or if you prefer not to read things that might undermine the opinion you currently hold, please feel free to skip straight to the next chapter.</summary>
    <content type="html">&lt;p&gt;Sometimes you stumble upon small insights that illuminate a good chunk
of things. Recently I think I have stumbled upon what I believe is a
case of that, on the Hibernate manual(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;King 2024&lt;/a&gt;), of
all places. The author of the manual itself makes it clear that it is a
special section of the manual:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this section, we’re going to give you our opinion. If you’re only
interested in facts, or if you prefer not to read things that might
undermine the opinion you currently hold, please feel free to skip
straight to the next chapter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The section can be summarized in the following recommendation and
image(&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;King 2024&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;we’re not sure you need a separate persistence layer at all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/hibernate-architecture.png&#34;
         alt=&#34;Figure 1: Hibernate&amp;amp;rsquo;s manual suggested architecture&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Hibernate&amp;rsquo;s manual suggested architecture&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What I found very interesting is that the core of the author&amp;rsquo;s point is
that it was misguided to believe the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eventually, some folks came to believe that their DAOs shielded their
program from depending in a hard way on ORM, allowing them to &amp;ldquo;swap out&amp;rdquo;
Hibernate, and replace it with JDBC, or with something else. In fact,
this was never really true—there’s quite a deep difference between the
programming model of JDBC, where every interaction with the database is
explicit and synchronous, and the programming model of stateful sessions
in Hibernate, where updates are implicit, and SQL statements are
executed asynchronously.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the same argument applies to Hibernate itself! Why call a
transaction/Hibernate layer at all? Why not just call directly the DBMS?
So that you can &lt;strong&gt;swap DBMSes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following is an image that I think summarizes this article:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/Charles_Henry_Bennett_-_The_Pot_Calling_The_Kettle_Black_%28coloured_engraving%29_-_%28MeisterDrucke-969630%29.jpg&#34;
         alt=&#34;Figure 2: Charles H. Bennett&amp;amp;rsquo;s coloured engraving from Shadow and Substance (1860), a series based on popular sayings. In this case, a coal-man and chimney sweep stop to argue in the street in illustration of &amp;amp;ldquo;The pot calling the kettle black&amp;amp;rdquo;. A street light throws the shadow of the kitchen implements on the wall behind them.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2: &lt;/span&gt;Charles H. Bennett&amp;rsquo;s coloured engraving from Shadow and Substance (1860), a series based on popular sayings. In this case, a coal-man and chimney sweep stop to argue in the street in illustration of &amp;ldquo;The pot calling the kettle black&amp;rdquo;. A street light throws the shadow of the kitchen implements on the wall behind them.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;King, Gavin. 2024. &lt;i&gt;An Introduction to Hibernate 6&lt;/i&gt;. 6.4. &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/6.4/introduction/html_single/Hibernate_Introduction.html&#34;&gt;https://docs.jboss.org/hibernate/orm/6.4/introduction/html_single/Hibernate_Introduction.html&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>What is database normalization and why should you do it?</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/what-is-database-normalization-and-why-should-you-do-it/"/>
    <id>https://ebellani.github.io/blog/2024/what-is-database-normalization-and-why-should-you-do-it/</id>
    <published>2024-02-25T00:00:00Z</published>
    <updated>2024-02-25T00:00:00Z</updated>
    <summary>A fully normalized database means one thing, and only one thing: your relations corresponds only one predicate under a given interpretation (i.e. your business rules).
You should properly normalize your database because it:
  Simplifies integrity enforcement and data manipulation; Avoids data redundancy and the risk of database inconsistency; Guarantees semantic correctness: no update anomalies. (Pascal 2016)   PS: As an example of the impact to the bottom line, think of it means to have to trust, but verify every piece of data you have.</summary>
    <content type="html">&lt;p&gt;A fully normalized database means one thing, and &lt;strong&gt;only&lt;/strong&gt; one thing: your
relations corresponds only one predicate &lt;strong&gt;under a given interpretation
(i.e. your business rules)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You should properly normalize your database because it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Simplifies integrity enforcement and data manipulation;&lt;/li&gt;
&lt;li&gt;Avoids data redundancy and the risk of database inconsistency;&lt;/li&gt;
&lt;li&gt;Guarantees semantic correctness: no update
anomalies. (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Pascal 2016&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS: As an example of the impact to the bottom line, think of it means to
have to &lt;code&gt;trust, but verify&lt;/code&gt; every piece of data you have. How many
checks, and in how many places? What if you forget one of those?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/ox-hugo/287615-rose-window-strasbourg-cathedral-strasbourg-france.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Pascal, Fabian. 2016. &lt;i&gt;The Dbdebunk Guide to Misconceptions About Data Fundamentals&lt;/i&gt;. DATABASE DEBUNKINGS.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>How I do development on PostgreSQL over Emacs</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/how-to-do-development-on-postgresql-over-emacs/"/>
    <id>https://ebellani.github.io/blog/2024/how-to-do-development-on-postgresql-over-emacs/</id>
    <published>2024-02-24T00:00:00Z</published>
    <updated>2024-02-24T00:00:00Z</updated>
    <summary>These days I&amp;rsquo;m doing quite a lot of work in PostgreSql. Given that my tool of choice is Emacs, I had to learn how to make do. This post&amp;rsquo;s goal is to document that.
First, I set up a connection
(add-to-list &amp;#39;sql-connection-alist `(production-read-only (sql-product &amp;#39;postgres) (sql-user &amp;#34;prod_user&amp;#34;) (sql-server &amp;#34;data-aurora.cluster-ro.us-east-1.rds.amazonaws.com&amp;#34;) (sql-database &amp;#34;ProdDB&amp;#34;))) Since this uses psql under the covers and I want to not to have to type passwords all the time, I store the passwords in ~/.</summary>
    <content type="html">&lt;p&gt;These days I&amp;rsquo;m doing quite a lot of work in PostgreSql. Given that my
tool of choice is Emacs, I had to learn how to make do. This post&amp;rsquo;s goal
is to document that.&lt;/p&gt;
&lt;p&gt;First, I set up a connection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;sql-connection-alist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;production-read-only&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-product&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;postgres&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-user&lt;/span&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;prod_user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-server&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data-aurora.cluster-ro.us-east-1.rds.amazonaws.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sql-database&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;ProdDB&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this uses psql under the covers and I want to not to have to type
passwords all the time, I store the passwords in &lt;code&gt;~/.pgpass&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# hostname:port:database:username:password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  data-aurora.cluster-ro.us-east-1.rds.amazonaws.com:5432:ProdDB:prod_user:the_password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make life a bit better over at psql&amp;rsquo;s prompt, I have a
&lt;code&gt;.psqlrc&lt;/code&gt; file with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et QUIET &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et PROMPT1 &lt;span class=&#34;s1&#34;&gt;&amp;#39;(%n@%m) [%/] &amp;gt; &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et PROMPT2 &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set null &lt;span class=&#34;s1&#34;&gt;&amp;#39;[null]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et COMP_KEYWORD_CASE upper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et HISTSIZE &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et VERBOSITY verbose
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set linestyle unicode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set border &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;set format wrapped
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;et QUIET &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I&amp;rsquo;d like to keep the history of commands. Here is how I enable that on comint-mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; This is based on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; The idea is to store sessions of comint based modes. For example, to enable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; reading/writing of command history in, say, inferior-haskell-mode buffers,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; simply add turn-on-comint-history to inferior-haskell-mode-hook by adding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; it to the :hook directive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint-write-history-on-exit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;comint-write-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process-buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer-live-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\nProcess %s %s&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;turn-on-comint-history&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;current-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint-input-ring-file-name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.emacs.d/inferior-%s-history&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;comint-read-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set-process-sentinel&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;comint-write-history-on-exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mapc-buffers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer-list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint-write-input-ring-all-buffers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapc-buffers&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;comint-write-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;kill-emacs-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;comint-write-input-ring-all-buffers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;kill-buffer-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;comint-write-input-ring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;comint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;sql-interactive-mode-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;turn-on-comint-history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sql-password-wallet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.authinfo.gpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Performance and safety</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/performance-and-safety/"/>
    <id>https://ebellani.github.io/blog/2024/performance-and-safety/</id>
    <published>2024-02-20T00:00:00Z</published>
    <updated>2024-02-20T00:00:00Z</updated>
    <summary> The human mind is limited in its capacity to understand complexity. Concurrent software systems are among the most complex of all human creations. Therefore, when you trade safety for performance, you will probably get neither.  </summary>
    <content type="html">&lt;ol&gt;
&lt;li&gt;The human mind is limited in its capacity to understand complexity.&lt;/li&gt;
&lt;li&gt;Concurrent software systems are among the most complex of all human creations.&lt;/li&gt;
&lt;li&gt;Therefore, when you trade safety for performance, you will probably get neither.&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Renaming, not abstraction, is the problem of our industry</title>
    <link rel="alternate" href="https://ebellani.github.io/blog/2024/renaming-not-abstraction/"/>
    <id>https://ebellani.github.io/blog/2024/renaming-not-abstraction/</id>
    <published>2024-01-30T00:00:00Z</published>
    <updated>2024-01-30T00:00:00Z</updated>
    <summary>abstraction (n.) (Latin abs, from trahere, to draw).
 I&amp;rsquo;ve seen people I consider good software engineers complaining that over-abstraction is a (the?) major problem in our industry today. Such points are usually raised when discussing software architecture in particular (one example: (iamprovidence 2023)).
I&amp;rsquo;d like to defend abstraction, and how I don&amp;rsquo;t think it is possible to have over abstraction (in the same sense you cannot be overly good, or overly healthy).</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;abstraction (n.) (Latin abs, from trahere, to draw).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve seen people I consider good software engineers complaining that
over-abstraction is a (the?) major problem in our industry today. Such
points are usually raised when discussing software architecture in
particular (one example: (&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;iamprovidence 2023&lt;/a&gt;)).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to defend abstraction, and how I don&amp;rsquo;t think it is possible to
have over abstraction (in the same sense you cannot be overly good, or
overly healthy).&lt;/p&gt;
&lt;p&gt;The definition I&amp;rsquo;d like to use for abstraction is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most eminent Scholastics, however, following Aristotle, ascribe to
the mind in its higher aspect a power (called the Active Intellect)
which abstracts from the representations of concrete things or qualities
the typical, ideal, essential elements, leaving behind those that are
material and particular.  (&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;Duffy 1907&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As one can see from such definition, the process is to select the
essentials from its concrete manifestation. On software engineering,
that means picking out the right form for your requirements, functional
or otherwise.&lt;/p&gt;
&lt;p&gt;What I think people are complaining about is renaming/rebranding
concepts, which is rife in our industry (see the table on &lt;a href=&#34;/blog/2023/cqrs-nominalism/&#34;&gt;CQRS as
nominalism&lt;/a&gt; for an example).&lt;/p&gt;
&lt;p&gt;What to do then, as a software engineer? Go beyond names, and meditate
on the essences of your craft. What is a function, what is a relation,
what is a number? It will then not matter (to you at least) if someone
calls a function an object, or a relation a table.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;style&gt;.csl-entry{text-indent: -1.5em; margin-left: 1.5em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;Duffy, F. 1907. “Abstraction.” The Catholic Encyclopedia, Vol 11. &lt;a href=&#34;http://www.newadvent.org/cathen/01074a.htm&#34;&gt;http://www.newadvent.org/cathen/01074a.htm&lt;/a&gt;.&lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;iamprovidence. 2023. “Backend Side Architecture Evolution (N-Layered, Ddd, Hexagon, Onion, Clean Architecture).” &lt;a href=&#34;https://web.archive.org/web/20230721054753/https://medium.com/@iamprovidence/backend-side-architecture-evolution-n-layered-ddd-hexagon-onion-clean-architecture-643d72444ce4&#34;&gt;https://web.archive.org/web/20230721054753/https://medium.com/@iamprovidence/backend-side-architecture-evolution-n-layered-ddd-hexagon-onion-clean-architecture-643d72444ce4&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
</feed>
