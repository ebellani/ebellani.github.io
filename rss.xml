<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>homepage title on Eduardo&#39;s blog</title>
    <link>https://ebellani.github.io/</link>
    <description>Recent content in homepage title on Eduardo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ebellani.github.io/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A real life example of database design</title>
      <link>https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/a-real-life-example-of-database-design/</guid>
      <description>In a followup to How to use the relational model to do database design?, I was asked to provide an example to illustrate the point:
 Can you walk through a real life example of modelling, let&amp;rsquo;s say, a car (it&amp;rsquo;s always a car isn&amp;rsquo;t it?).. Consider that the car may have 2WD, 4WD and also let say we allow truck types of cars with 6 wheels. Cars have various engine types and depending on the model of car, some colours are available and some are not.</description>
    </item>
    
    <item>
      <title>How to use the relational model to do database design?</title>
      <link>https://ebellani.github.io/blog/2024/how-to-use-the-relational-model-to-do-database-design/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/how-to-use-the-relational-model-to-do-database-design/</guid>
      <description>On a recent exchange I was asked the following:
 &amp;hellip; what you mean that you use the relation model to design? &amp;hellip;
 Let&amp;rsquo;s first start with the motivation: Why should one use the relational model(RM) to do database design? Here is my one line answer:
It makes it possible to have and to maintain the integrity of your business rules.
To illustrate this point, here are some examples of problems that one faces when one does not have such integrity:</description>
    </item>
    
    <item>
      <title>How to (not) lock yourself into architectural drawbacks, or, Microservice architecture as the reification of Pi-Calculus</title>
      <link>https://ebellani.github.io/blog/2024/microservices-as-reification/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/microservices-as-reification/</guid>
      <description>Reification: the treatment of something abstract as a material or concrete thing, as in the following lines from Matthew Arnold’s poem “Dover Beach”: (Britannica 2018)
/The Sea of Faith
Was once, too, at the full, and round earth’s shore
Lay like the folds of a bright girdle furled./
  The microservice architecture(MA) has taken a deep hold in the collective imagination of the software engineering community since at least 20141.</description>
    </item>
    
    <item>
      <title>A practical principle on politics (office or otherwise)</title>
      <link>https://ebellani.github.io/blog/2024/a-practical-principle-on-politics--office-or-otherwise/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/a-practical-principle-on-politics--office-or-otherwise/</guid>
      <description>If you are involved in politics, as a voter or just as an office worker in an unfortunate situation, you would do well to remember this dictum:
 When a public figure tells you something that you want to hear, question his sincerity. When a public figure tells you something you don’t want to hear, believe him.(Lawler 2024)
  Figure 1: The destruction of the original Church of Christ the Saviour in Moscow, Russia</description>
    </item>
    
    <item>
      <title>A point about FAANG points</title>
      <link>https://ebellani.github.io/blog/2024/a-point-about-faang/</link>
      <pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/a-point-about-faang/</guid>
      <description>As a technologist I often hear variations of the following phrase in my industry:
 Do it because some FAANG(Fernando 2023) company did it.
 The structure of this argument is usually like this:
 Technique or process X is great/bad, Company C does it like this, C is financially successful and famous, Therefore, you should do the same X as C does.  This is a mixture of the fallacies of selection bias, appeal to authority and false cause.</description>
    </item>
    
    <item>
      <title>What is really the matter with the &#39;database&#39;?</title>
      <link>https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/what-is-really-the-matter-with-the-database/</guid>
      <description>How can we talk straight about a concept when the term that should signify it is equivocated all the time?
I think this is a big part of the problem on discussions about databases. Here are some ways that the term database is widely used in the tech industry:
 A server I&#39;ll access the database in prod. An instance of a DBMS We are running PG 9.3 locally. A design My database will have a user table and a product table.</description>
    </item>
    
    <item>
      <title>The three traditional laws of being</title>
      <link>https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/the-three-traditional-laws-of-being/</guid>
      <description>The law of identity &amp;lsquo;Whatever is, is.&amp;rsquo; The law of non-contradiction &amp;lsquo;Nothing can both be and not be.&amp;rsquo; The law of excluded middle &amp;lsquo;Everything must either be or not be.&amp;rsquo; (Russell 1912)   Figure 1: The North Rose window of Chartres Cathedral, France, 1190-1220 CE. The stained glass window shows scenes of Jesus Christ, the prophets and 12 kings of Judah.
  References .csl-entry{text-indent: -1.5em; margin-left: 1.5em;}Russell, Bertrand.</description>
    </item>
    
    <item>
      <title>Who should rule</title>
      <link>https://ebellani.github.io/blog/2024/who-should-rule/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/who-should-rule/</guid>
      <description>If you want to become a (better) leader, you should master the four essential characteristics for leaders: integrity, judgment, competence, and vision(Hogan and Kaiser 2005):
 Integrity. A leader must be trusted to be followed. Decisiveness. Making reasonable decisions in a timely manner. Competence. Both your followers and your stakeholders must know that you not only mean well but that you can deliver. Vision. Setting goals under the right strategy is vital for team and company success against its competition.</description>
    </item>
    
    <item>
      <title>Principles of reliable applications</title>
      <link>https://ebellani.github.io/blog/2024/principles-of-reliable-applications/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/principles-of-reliable-applications/</guid>
      <description>The following are adapted from(Perry 2020), using a more database centric approach:
   Principle Implementation     Idempotence Client side ids; Session ids   Immutability Insert only DBMSes (system time in SQL 2016)   Location independence Natural keys   Versioning Additive structures; Temporal dimension on schemas     Figure 1: Gargoyles of Notre-Dame de Paris
  References .csl-entry{text-indent: -1.5em; margin-left: 1.</description>
    </item>
    
    <item>
      <title>Pots, kettles and databases</title>
      <link>https://ebellani.github.io/blog/2024/pots-kettles-and-databases/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/pots-kettles-and-databases/</guid>
      <description>Sometimes you stumble upon small insights that illuminate a good chunk of things. Recently I think I have stumbled upon what I believe is a case of that, on the Hibernate manual(King 2024), of all places. The author of the manual itself makes it clear that it is a special section of the manual:
 In this section, we’re going to give you our opinion. If you’re only interested in facts, or if you prefer not to read things that might undermine the opinion you currently hold, please feel free to skip straight to the next chapter.</description>
    </item>
    
    <item>
      <title>What is database normalization and why should you do it?</title>
      <link>https://ebellani.github.io/blog/2024/what-is-database-normalization-and-why-should-you-do-it/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/what-is-database-normalization-and-why-should-you-do-it/</guid>
      <description>A fully normalized database means one thing, and only one thing: your relations corresponds only one predicate under a given interpretation (i.e. your business rules).
You should properly normalize your database because it:
  Simplifies integrity enforcement and data manipulation; Avoids data redundancy and the risk of database inconsistency; Guarantees semantic correctness: no update anomalies. (Pascal 2016)   PS: As an example of the impact to the bottom line, think of it means to have to trust, but verify every piece of data you have.</description>
    </item>
    
    <item>
      <title>How I do development on PostgreSQL over Emacs</title>
      <link>https://ebellani.github.io/blog/2024/how-to-do-development-on-postgresql-over-emacs/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/how-to-do-development-on-postgresql-over-emacs/</guid>
      <description>These days I&amp;rsquo;m doing quite a lot of work in PostgreSql. Given that my tool of choice is Emacs, I had to learn how to make do. This post&amp;rsquo;s goal is to document that.
First, I set up a connection
(add-to-list &amp;#39;sql-connection-alist `(production-read-only (sql-product &amp;#39;postgres) (sql-user &amp;#34;prod_user&amp;#34;) (sql-server &amp;#34;data-aurora.cluster-ro.us-east-1.rds.amazonaws.com&amp;#34;) (sql-database &amp;#34;ProdDB&amp;#34;))) Since this uses psql under the covers and I want to not to have to type passwords all the time, I store the passwords in ~/.</description>
    </item>
    
    <item>
      <title>Performance and safety</title>
      <link>https://ebellani.github.io/blog/2024/performance-and-safety/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/performance-and-safety/</guid>
      <description> The human mind is limited in its capacity to understand complexity. Concurrent software systems are among the most complex of all human creations. Therefore, when you trade safety for performance, you will probably get neither.  </description>
    </item>
    
    <item>
      <title>Renaming, not abstraction, is the problem of our industry</title>
      <link>https://ebellani.github.io/blog/2024/renaming-not-abstraction/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/renaming-not-abstraction/</guid>
      <description>abstraction (n.) (Latin abs, from trahere, to draw).
 I&amp;rsquo;ve seen people I consider good software engineers complaining that over-abstraction is a (the?) major problem in our industry today. Such points are usually raised when discussing software architecture in particular (one example: (iamprovidence 2023)).
I&amp;rsquo;d like to defend abstraction, and how I don&amp;rsquo;t think it is possible to have over abstraction (in the same sense you cannot be overly good, or overly healthy).</description>
    </item>
    
    <item>
      <title>A dangerous book</title>
      <link>https://ebellani.github.io/blog/2024/dangerous-book/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2024/dangerous-book/</guid>
      <description>I recently commented on how the book (Kleppmann 2017) is a dangerous book, due to a subtle error on how it defines data models. I suppose it&amp;rsquo;s my burden to further clarify this point, and for that I&amp;rsquo;ll use Hayek&amp;rsquo;s critical methodological maxim:
 We must first explain how an economy can possibly work right before we can meaningfully ask what might go wrong
 What is a data model? Here are 3 definitions, in increasing level of detail:</description>
    </item>
    
    <item>
      <title>Measure, don’t guess.</title>
      <link>https://ebellani.github.io/blog/2023/measure-dont-guess/</link>
      <pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/measure-dont-guess/</guid>
      <description>&amp;hellip; when you trade safety for performance, you may get neither. Especially when it comes to concurrency, the intuition of many developers about where a performance problem lies or which approach will be faster or more scalable is often incorrect.
It is therefore imperative that any performance tuning exercise be accompanied by concrete performance requirements (so you know both when to tune and when to stop tuning) and with a measurement program in place using a realistic configuration and load profile.</description>
    </item>
    
    <item>
      <title>Themes of the Elite Private School Curriculum</title>
      <link>https://ebellani.github.io/blog/2023/theme-elite-schooling/</link>
      <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/theme-elite-schooling/</guid>
      <description>I think its fair to say that one can significantly improve one&amp;rsquo;s chances of being materially successful in life by learning John Taylor Gatto’s 14 Themes of the Elite Private School Curriculum1:
  A theory of human nature (as embodied in history, philosophy, theology, literature and law).
  Skill in the active literacies (writing, public speaking).
  Insight into the major institutional forms (courts, corporations, military, education).</description>
    </item>
    
    <item>
      <title>CQRS as nominalism</title>
      <link>https://ebellani.github.io/blog/2023/cqrs-nominalism/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/cqrs-nominalism/</guid>
      <description>A theme that I think is important to understand a lot of modernity and the IT sector in particular, is nominalism.1
So, what is Nominalism, and why does it matter? I&amp;rsquo;ll start with a concrete case and work my way to the abstract definition. The case in point is a somewhat popular architecture tactic, CQRS.
What is CQRS? Here is an authoritative word on it(Young 2010):
 Command and Query Responsibility Segregation (CQRS) originated with Bertrand Meyer’s Command and Query Separation Principle</description>
    </item>
    
    <item>
      <title>How to stand out in your career, the shortest version I know</title>
      <link>https://ebellani.github.io/blog/2023/stand-out-short/</link>
      <pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/stand-out-short/</guid>
      <description>Someone asked me about this, so I feel it might help people out there.
The short, no nonsense advise I give to people on standing out as a programmer:
 Generate results Make your boss look good Join a relevant open source project  </description>
    </item>
    
    <item>
      <title>Recruitment and Selection of high performing programmers</title>
      <link>https://ebellani.github.io/blog/2023/rec-sel-programmers/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/rec-sel-programmers/</guid>
      <description>What could be more important for a technology company than great software? High performing software developers and their teams. After all, they are the ones who actually create and maintain that great software.
But do they really make a difference? I&amp;rsquo;ll let the numbers speak for themselves. Here are the typical variations in:(Steve 2014)
 Individual performance 20 to 1, Team performance 10 to 1, Method performance 1.2 to 1.  One can find a compelling illustration of these data on (Oram and Wilson 2010).</description>
    </item>
    
    <item>
      <title>What is a good manager?</title>
      <link>https://ebellani.github.io/blog/2023/what-is-a-good-manager/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/what-is-a-good-manager/</guid>
      <description>It is hard to do science without proper definitions. So what is a manager?
Abstracting from (Horstman 2016), my definition of a manager is the following:
 A manager continuously balances present output with creating the conditions of future output.
  Figure 1: The Good Sheperd, emblem found in a Roman catacomb, sec III
  As one can see, this definition is similar to an investor. That is expected, since a manager is an investor of a company&amp;rsquo;s resources.</description>
    </item>
    
    <item>
      <title>Is chatGPT replacing you? or: The nature of the intellectual act</title>
      <link>https://ebellani.github.io/blog/2023/ai-intellectual-act/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/ai-intellectual-act/</guid>
      <description>I have come across people claiming to fear being replaced by bots, specially chatGPT and other large language models (LLM). In this article I&amp;rsquo;ll take such statements at face value, despite my reservations about the sincerity of many of them.
The short answer is to the question in the title is no, you will not get replaced. The longer answer is below.
 Figure 1: Rudolph, Conrad. The Mystic Ark: Hugh of Saint Victor, Art, and Thought in the Twelfth Century.</description>
    </item>
    
    <item>
      <title>An illustrated way to enable openVPN on Qubes OS 4.1.2</title>
      <link>https://ebellani.github.io/blog/2023/vpn-qubes/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ebellani.github.io/blog/2023/vpn-qubes/</guid>
      <description>In my view, Qubes OS lives up to its motto: A reasonably secure operating system. I use it for work and personal matters every day.
One challenging bit, when you use it in a work setting specially, is to set up a VPN qube for your app qubes.
There are probably other ways to do this, but the way I chose to structure my setup was the following:
 After you create your app qube for the VPN and assuming your template is Debian, go to the template terminal (Debian 11) and run:</description>
    </item>
    
  </channel>
</rss>
